//
// modecompute.edp
// Chris Douglas
// cdoug@mit.edu
//
// EXAMPLE USAGE:
//  Solve eigenvalue problem, store eigenvalue spectrum without storing eigenvectors:
// ff-mpirun -np 4 modecompute.edp -eps_target 0.1+1.0i -eps_nev 10 -fi <FILEIN> -so <VALFILE>
//
//  Solve eigenvalue problem, store eigenvalue spectrum and eigenvectors:
// ff-mpirun -np 4 modecompute.edp -eps_target 0.1+1.0i -eps_nev 4 -fi <FILEIN> -fo <VECFILE> -so <VALFILE>
//
//  Solve eigenvalue problem, store eigenvectors without storing eigenvalue spectrum:
// ff-mpirun -np 4 modecompute.edp -eps_target 0.1+1.0i -eps_nev 4 -fi <FILEIN> -fo <VECFILE>
//
//  Solve eigenvalue problems over a sequence of shifts, store eigenvalue spectra and eigenvectors:
// ff-mpirun -np 4 modecompute.edp -eps_target 0.1+0.2i -ntarget 10 -targetf 0.1+2.0i -eps_nev 4 -fi <FILEIN> -fo <VECFILE> -so <VALFILE>
//
//  Solve linear forced response problem, store solution:
// ff-mpirun -np 4 modecompute.edp -eps_target 0+1.0i -forcing 1 -fi <FILEIN> -fo <VECFILE>
//
//  Solve linear forced response problem over a sequence of shifts, store solutions:
// ff-mpirun -np 4 modecompute.edp -eps_target 0+0.2i -ntarget 10 -targetf 0+2.0i -forcing 1 -fi <FILEIN> -fo <VECFILE>
//
// NOTE: This file should not be changed unless you know what you're doing.
//
load "iovtk"
load "PETSc-complex"
include "settings.idp"
include "macros_bifbox.idp"
// arguments
string meshin = getARGV("-mi", ""); // input meshfile
string filein = getARGV("-fi", "");
string fileout = getARGV("-fo", "");
string evalout = getARGV("-so", "");
bool adj = getARGV("-adj",0);
string symstr = getARGV("-sym", "0");
string epstarget = getARGV("-eps_target", "0+0i");
int ntarget = getARGV("-ntarget", 1);
string targetf = getARGV("-targetf", epstarget);
int epsnev = getARGV("-eps_nev", 1);
bool strictnev = getARGV("-strict", 0);
bool forcing = getARGV("-forcing", 0); // toggle eigensolver or forced response

// Load mesh, make FE basis
string fileroot, fileext = parsefilename(filein, fileroot); //extract file name and extension
parsefilename(evalout, evalout); // trim extension from output file, if given
parsefilename(fileout, fileout); // trim extension from output file, if given
if(fileext == "mode" || fileext == "rslv" || fileext == "tdls"){
  filein = readbasename(workdir + filein);
  fileext = parsefilename(filein, fileroot);
}
if(filein != "" && meshin == "") meshin = readmeshname(workdir + filein); // get mesh file
Th = readmeshN(workdir + meshin);
Thg = Th;
buildDmesh(Th);
restu = restrict(XMh, XMhg, n2o);
XMh defu(ub), defu(um2), defu(um3);
if(fileext == "base") {
  ub[] = loadbase(fileroot, meshin);
}
else if(fileext == "fold") {
  real[string] alpha;
  real beta;
  real[int] qm, qma;
  ub[] = loadfold(fileroot, meshin, qm, qma, alpha, beta);
}
else if(fileext == "hopf") {
  real omega;
  complex[string] alpha;
  complex beta;
  complex[int] qm, qma;
  ub[] = loadhopf(fileroot, meshin, qm, qma, sym, omega, alpha, beta);
}
else if(fileext == "foho") {
  real omega;
  complex[string] alpha1;
  real[string] alpha2;
  complex beta1, gamma12, gamma13;
  real beta22, beta23, gamma22, gamma23;
  complex[int] q1m, q1ma;
  real[int] q2m, q2ma;
  ub[] = loadfoho(fileroot, meshin, q1m, q1ma, q2m, q2ma, sym, omega, alpha1, alpha2, beta1, beta22, beta23, gamma12, gamma13, gamma22, gamma23);
}
else if(fileext == "hoho") {
  real[int] sym1(sym.n), sym2(sym.n);
  real omega1, omega2;
  complex[string] alpha1, alpha2;
  complex beta1, beta2, gamma1, gamma2, gamma12, gamma13, gamma22, gamma23;
  complex[int] q1m, q1ma, q2m, q2ma;
  ub[] = loadhoho(fileroot, meshin, q1m, q1ma, q2m, q2ma, sym1, sym2, omega1, omega2, alpha1, alpha2, beta1, beta2, gamma1, gamma2, gamma12, gamma13, gamma22, gamma23);
}
else if(fileext == "tdns") {
  real time;
  ub[] = loadtdns(fileroot, meshin, time);
}
else if(fileext == "porb") {
  int Nh=1;
  real omega;
  complex[int, int] qh(ub[].n, Nh);
  ub[] = loadporb(fileroot, meshin, qh, sym, omega, Nh);
}
complex[int] val(epsnev);
XMh<complex>[int] defu(vec)(epsnev);
XMh<complex> defu(um);

Mat<complex> J;
createMatu(Th, J, Pk);
Mat<complex> M(J);

sym = parsesymstr(symstr);
complex[int] ik(sym.n), ik2(sym.n), ik3(sym.n);
complex iomega = 0.0, iomega2 = 0.0, iomega3 = 0.0; // Let PETSc/SLEPc do the shift
include "eqns.idp"

int sepcharind = max(epstarget.rfind("+"), epstarget.rfind("-"));
complex shifts = atof(epstarget(0:sepcharind)) + 1i*atof(epstarget(sepcharind:epstarget.length-2));
complex shift = shifts;
sepcharind = max(targetf.rfind("+"), targetf.rfind("-"));
complex shiftf = atof(targetf(0:sepcharind)) + 1i*atof(targetf(sepcharind:targetf.length-2));
if (!forcing){ // compute eigenmodes with SLEPc
  ik.im = sym;
  {
    M = vM(XMh, XMh, tgv = -10);
    matrix<complex> Jtemp = vJ(XMh, XMh, tgv = -1);
    if (adj) Jtemp = -Jtemp';
    else Jtemp = -Jtemp;
    J = Jtemp;
  }
  for (int n = 0; n < ntarget; ++n){
    if (ntarget > 1) shift = shifts + (shiftf - shifts)*real(n)/real(ntarget - 1);
    IFMACRO(Jprecon) Jprecon(-shift); ENDIFMACRO
    int k = EPSSolve(J, M, vectors = vec, values = val, IFMACRO(Jsetargs) Jsetargs, ENDIFMACRO
                   sparams = "-st_type sinvert -options_left no -eps_monitor_conv -prefix_push st_ " + KSPparams + " -prefix_pop -eps_target " + string(shift));
    if (strictnev) {// activate to limit number of eigenpairs
      val.resize(min(k, epsnev));
      vec.resize(min(k, epsnev));
    }
    real[int] ubsave = ub[];
    complex[int] temp;
    um[].re = ub[];
    ChangeNumbering(J, um[], temp);
    ChangeNumbering(J, um[], temp, inverse = true);
    ub[] = um[].re;
    for (int ii = 0; ii < val.n; ++ii){
      um[] = vec[ii][];
      ChangeNumbering(J, um[], temp);
      ChangeNumbering(J, um[], temp, inverse = true);
      vec[ii][] = um[];
    }
    savemode(fileout + ((ntarget > 1) ? ("_" + n) : ""), evalout, filein, meshin, vec, val, sym, (fileout != ""));
    ub[] = ubsave;
  }
}
else { // compute forced response mode with PETSc
  assert(adj == 0 && epsnev == 1);
  ik.im = sym;
  for (int n = 0; n < ntarget; ++n){
    if (ntarget > 1) shift = shifts + (shiftf - shifts)*real(n)/real(ntarget - 1);
    iomega = shift;
    val[0] = shift;
    complex[int] RHS = vMq(0, XMh, tgv = -1);
    J = vJ(XMh, XMh, tgv = -1);
    // set up Mat parameters
    IFMACRO(Jprecon) Jprecon(shift); ENDIFMACRO
    set(J, IFMACRO(Jsetargs) Jsetargs, ENDIFMACRO sparams = KSPparams + " -options_left no");
    um[] = J^-1*RHS;
    real[int] ubsave = ub[];
    complex[int] temp;
    um[].re = ub[];
    ChangeNumbering(J, um[], temp);
    ChangeNumbering(J, um[], temp, inverse = true);
    ub[] = um[].re;
    for (int ii = 0; ii < val.n; ++ii){
      ChangeNumbering(J, um[], temp);
      ChangeNumbering(J, um[], temp, inverse = true);
      vec[ii][] = um[];
    }
    savemode(fileout + ((ntarget > 1) ? ("_" + n) : ""), "", filein, meshin, vec, val, sym, (fileout != ""));
    ub[] = ubsave;
  }
}
