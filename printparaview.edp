//
// printparaview.edp
// Chris Douglas
// chris.douglas@ladhyx.polytechnique.fr
//
// EXAMPLE USAGE:
//  Print base solution to single .vtu file:
// mpirun -n 1 FreeFem++-mpi -v 0 printparaview.edp -bfi <FILEIN>
//
//  Print mode solution to single .vtu file:
// mpirun -n 1 FreeFem++-mpi -v 0 printparaview.edp -mfi <FILEIN>
//
//  Print resolvent solution to two .vtu files:
// mpirun -n 1 FreeFem++-mpi -v 0 printparaview.edp -rfi <FILEIN>
//
//  Print fold solution to three .vtu files:
// mpirun -n 1 FreeFem++-mpi -v 0 printparaview.edp -ffi <FILEIN>
//
//  Print hopf solution to three .vtu files:
// mpirun -n 1 FreeFem++-mpi -v 0 printparaview.edp -ffi <FILEIN>
//
// NOTE: This file should not be changed unless you know what you're doing.
//
load "iovtk"
include "solversettings.idp"
include "solvermacros.idp"
// arguments
string basefilein = getARGV("-bfi", "");
string basefileout = getARGV("-bfo", basefilein);
string modefilein = getARGV("-mfi", "");
string modefileout = getARGV("-mfo", modefilein);
string resolventfilein = getARGV("-rfi", "");
string resolventfileout = getARGV("-rfo", resolventfilein);
string foldfilein = getARGV("-ffi", "");
string foldfileout = getARGV("-ffo", foldfilein);
string hopffilein = getARGV("-hfi", "");
string hopffileout = getARGV("-hfo", hopffilein);
int meshsplit = getARGV("-split",1);
if (mpirank==0){
  if (basefilein != ""){
    string meshfile = readmeshname(workdir + basefilein + ".base");
    Thg = readmesh(workdir + meshfile + meshext);
    XMhg defu(ub);
    restu = 0:XMhg.ndof-1;
    ub[] = loadbase(basefilein, meshfile);
    cout << "  Saving '" + basefileout + "_base.vtu' in '" + workdir + "'." << endl;
    if (meshsplit != 1){
      meshN Thgs = trunc(Thg, 1, split = meshsplit);
      fespace XMhs(Thgs, Pk);
      XMhs defu(us) = defu(ub);
      savevtk(workdir + basefileout + "_base.vtu", Thgs, adaptu(us), dataname = ParaviewDataName, order = ParaviewOrder);
    } else {
      savevtk(workdir + basefileout + "_base.vtu", Thg, adaptu(ub), dataname = ParaviewDataName, order = ParaviewOrder);
    }
  } else if (modefilein != ""){
    string meshfile = readmeshname(workdir + modefilein + ".mode");
    Thg = readmesh(workdir + meshfile + meshext);
    XMhg<complex> defu(um);
    restu = 0:XMhg.ndof-1;
    int m;
    complex eigenvalue;
    um[] = loadmode(modefilein, meshfile, m, eigenvalue);
    cout << "  Saving '" + modefileout + "_mode.vtu' in '" + workdir + "'." << endl;
    string pvdataname = ParaviewDataName + " " + ParaviewDataName;
    int[int] pvorder = [ParaviewOrder,ParaviewOrder];
    if (meshsplit != 1){
      meshN Thgs = trunc(Thg, 1, split = meshsplit);
      fespace XMhs(Thgs, Pk);
      XMhs<complex> defu(uso) = defu(um);
      XMhs defu(usr), defu(usi);
      usr[] = uso[].re;
      usi[] = uso[].im;
      savevtk(workdir + modefileout + "_mode.vtu", Thgs, adaptu(usr), adaptu(usi), dataname = pvdataname, order = pvorder);
    } else {
      XMhg defu(usr), defu(usi);
      usr[] = um[].re;
      usi[] = um[].im;
      savevtk(workdir + modefileout + "_mode.vtu", Thg, adaptu(usr), adaptu(usi), dataname = pvdataname, order = pvorder);
    }
  } else if (resolventfilein != ""){
    string meshfile = readmeshname(workdir + resolventfilein + ".rslv");
    Thg = readmesh(workdir + meshfile + meshext);
    Xhg<complex> deff(fm);
    XMhg<complex> defu(um);
    restf = 0:Xhg.ndof-1;
    restu = 0:XMhg.ndof-1;
    int m;
    real omega;
    real gain;
    um[] = loadresolvent(resolventfilein, meshfile, fm[], m, omega, gain);
    cout << "  Saving '" + resolventfileout + "_rslv_[forcing,response].vtu' in '" + workdir + "'." << endl;
    string pvdataname = ParaviewDataName + " " + ParaviewDataName;
    int[int] pvorder = [ParaviewOrder,ParaviewOrder];
    string pvdatanamef = ParaviewDataNamef + " " + ParaviewDataNamef;
    int[int] pvorderf = [ParaviewOrderf,ParaviewOrderf];
    if (meshsplit != 1){
      meshN Thgs = trunc(Thg, 1, split = meshsplit);
      fespace XMhs(Thgs, Pk);
      XMhs<complex> defu(uso) = defu(um);
      fespace Xhs(Thgs, Pkf);
      Xhs<complex> deff(fso) = deff(fm);
      Xhg deff(fsr), deff(fsi);
      fsr[] = fso[].re;
      fsi[] = fso[].im;
      savevtk(workdir + resolventfileout + "_mode_forcing.vtu", Thg, adaptf(fsr), adaptf(fsi), dataname = pvdatanamef, order = pvorderf);
      XMhs defu(usr), defu(usi);
      usr[] = uso[].re;
      usi[] = uso[].im;
      savevtk(workdir + resolventfileout + "_rslv_response.vtu", Thgs, adaptu(usr), adaptu(usi), dataname = pvdataname, order = pvorder);
    } else {
      Xhg deff(fsr), deff(fsi);
      fsr[] = fm[].re;
      fsi[] = fm[].im;
      savevtk(workdir + resolventfileout + "_mode_forcing.vtu", Thg, adaptf(fsr), adaptf(fsi), dataname = pvdatanamef, order = pvorderf);
      XMhg defu(usr), defu(usi);
      usr[] = um[].re;
      usi[] = um[].im;
      savevtk(workdir + resolventfileout + "_mode_response.vtu", Thg, adaptu(usr), adaptu(usi), dataname = pvdataname, order = pvorder);
    }
  } else if (foldfilein != ""){
    string meshfile = readmeshname(workdir + foldfilein + ".fold");
    Thg = readmesh(workdir + meshfile + meshext);
    XMhg defu(ub), defu(um), defu(uma);
    restu = 0:XMhg.ndof-1;
    ub[] = loadfold(foldfilein, meshfile, um[], uma[]);
    cout << "  Saving '" + foldfileout + "_fold_[base,dirmode,adjmode].vtu' in '" + workdir + "'." << endl;
    if (meshsplit != 1){
      meshN Thgs = trunc(Thg, 1, split = meshsplit);
      fespace XMhs(Thgs, Pk);
      XMhs defu(ubs) = defu(ub);
      XMhs defu(ums) = defu(um);
      XMhs defu(umas) = defu(uma);
      savevtk(workdir + foldfileout + "_fold_base.vtu", Thgs, adaptu(ubs), dataname = ParaviewDataName, order = ParaviewOrder);
      savevtk(workdir + foldfileout + "_fold_dirmode.vtu", Thgs, adaptu(ums), dataname = ParaviewDataName, order = ParaviewOrder);
      savevtk(workdir + foldfileout + "_fold_adjmode.vtu", Thgs, adaptu(umas), dataname = ParaviewDataName, order = ParaviewOrder);
    } else {
      savevtk(workdir + foldfileout + "_fold_base.vtu", Thg, adaptu(ub), dataname = ParaviewDataName, order = ParaviewOrder);
      savevtk(workdir + foldfileout + "_fold_dirmode.vtu", Thg, adaptu(um), dataname = ParaviewDataName, order = ParaviewOrder);
      savevtk(workdir + foldfileout + "_fold_adjmode.vtu", Thg, adaptu(uma), dataname = ParaviewDataName, order = ParaviewOrder);
    }
  } else if (hopffilein != ""){
    string meshfile = readmeshname(workdir + hopffilein + ".hopf");
    Thg = readmesh(workdir + meshfile + meshext);
    XMhg defu(ub);
    XMhg<complex> defu(um), defu(uma);
    restu = 0:XMhg.ndof-1;
    real omega;
    int m;
    ub[] = loadhopf(hopffilein, meshfile, um[], uma[], m, omega);
    cout << "  Saving '" + hopffileout + "_hopf_[base,dirmode,adjmode].vtu' in '" + workdir + "'." << endl;
    string pvdataname = ParaviewDataName + " " + ParaviewDataName;
    int[int] pvorder = [ParaviewOrder,ParaviewOrder];
    if (meshsplit != 1){
      meshN Thgs = trunc(Thg, 1, split = meshsplit);
      fespace XMhs(Thgs, Pk);
      XMhs defu(ubs) = defu(ub), defu(ubsi);
      XMhs<complex> defu(ums) = defu(um);
      XMhs<complex> defu(umas) = defu(uma);
      savevtk(workdir + hopffileout + "_hopf_base.vtu", Thgs, adaptu(ubs), dataname = ParaviewDataName, order = ParaviewOrder);
      ubs[] = ums[].re;
      ubsi[] = ums[].im;
      savevtk(workdir + hopffileout + "_hopf_dirmode.vtu", Thgs, adaptu(ubs), adaptu(ubsi), dataname = pvdataname, order = pvorder);
      ubs[] = umas[].re;
      ubsi[] = umas[].im;
      savevtk(workdir + hopffileout + "_hopf_adjmode.vtu", Thgs, adaptu(ubs), adaptu(ubsi), dataname = pvdataname, order = pvorder);
    } else {
      savevtk(workdir + hopffileout + "_hopf_base.vtu", Thg, adaptu(ub), dataname = ParaviewDataName, order = ParaviewOrder);
      XMhg defu(ubi);
      ub[] = um[].re;
      ubi[] = um[].im;
      savevtk(workdir + hopffileout + "_hopf_dirmode.vtu", Thg, adaptu(ub), adaptu(ubi), dataname = pvdataname, order = pvorder);
      ub[] = uma[].re;
      ubi[] = uma[].im;
      savevtk(workdir + hopffileout + "_hopf_adjmode.vtu", Thg, adaptu(ub), adaptu(ubi), dataname = pvdataname, order = pvorder);
    }
  }
}
