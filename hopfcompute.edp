//
// hopfcompute.edp
// Chris Douglas
// christopher.douglas@duke.edu
//
// EXAMPLE USAGE:
//  Initialize with Hopf guess from base file, solve on same mesh
// ff-mpirun -np 4 hopfcompute.edp -param <PARAM> -fi <FILEIN> -bfi <BASEFILEIN> -fo <FILEOUT>
//
//  Initialize with Hopf from base and mode file, solve on same mesh
// ff-mpirun -np 4 hopfcompute.edp -param <PARAM> -fi <FILEIN> -fo <FILEOUT>
//
//  Initialize with Hopf guess from file on a mesh from file
// ff-mpirun -np 4 hopfcompute.edp -param <PARAM> -mi <MESHIN> -bfi <BASEFILEIN> -fi <FILEIN> -fo <FILEOUT>
//
//  Initialize with Hopf from file, adapt mesh/solution
// ff-mpirun -np 4 hopfcompute.edp -param <PARAM> -fi <FILEIN> -fo <FILEOUT> -mo <MESHOUT>
//
// NOTE: This file should not be changed unless you know what you're doing.
//
/*
 This script computes the normal form at a non-degenerate Hopf point.
 The normal form is written for the complex amplitude Z = A*exp(1i*omega*t) as:
    dZ/dt = Z*( alpha*dlambda + 1i*omega + beta*|Z|^2 )
 where:
    alpha is the coefficient for the term from parameter changes,
    beta is the coefficient for the term from harmonic interactions.
 Using this convention, the bifurcation is supercritical for real(beta) < 0,
 and subcritical for real(beta) > 0.

RESIDUAL EVALUATION IN MINIMALLY AUGMENTED FORMULATION
 We can directly compute the residual using the varf vR().
 To build Ra, we must additionally compute the Hopf residual augmentation:
     g = v'*(1i*omega*M + J)*w = v'*L*w
 where g is the Hopf residual and v & w are the adjoint & direct eigenvectors.
 g, v, and w, can be found using minimially augmented systems:
 (For more details, see Govaerts, (2000), Ch. 4, particularly page 87.)
       ┌                 ┐┌   ┐   ┌   ┐
       | -L         M*p0 || w |   | 0 |
  (1)  |                 ||   | = |   |
       | (M*q0)'    0    || g |   | 1 |
       └                 ┘└   ┘   └   ┘
 where q0, p0 are initial approximations of the direct & adjoint eigenvectors.
 This implies:
     L*w = M*p0*g  and  (M*q0)'*w = 1
 so
     w = L^-1*M*p0*g  and  g = 1.0/((M*q0)'*L^-1*M*p0)

 At g = 0, we have L*w = 0 and (M*q0)'*w = 1.

 Similarly, we can find the adjoint eigenmode using the related system:
                        ┌                  ┐
       ┌               ┐| -L          M*p0 |   ┌        ┐
  (2)  |  v'   conj(h) ||                  | = | 0    1 |
       └               ┘| (M*q0)'     0    |   └        ┘
                        └                  ┘
 This implies:
      v'*L = conj(h)*(M*q0)'  and  v'*M*p0 = 1
   or, taking the complex conjugate transpose:
        ┌                 ┐┌   ┐   ┌   ┐
        | -L'        M*q0 || v |   | 0 |
  (2')  |                 ||   | = |   |
        | (M*p0)'    0    || h |   | 1 |
        └                 ┘└   ┘   └   ┘
 giving, equivalently,
     L'*v = M*q0*h  and  (M*p0)'*v = 1
 so
     v = L'^-1*M*q0*h  and  h = 1.0/((M*p0)'*L'^-1*M*q0)

 At h = 0, we have L'*v = 0 and (M*p0)'*v = 1, so v'*L = 0 and v'*M*p0 = 1.

 It can be confirmed that g = conj(h) and that g = v'*L*w, h = w'*L'*v.

JACOBIAN CONSTRUCTION IN MINIMALLY AUGMENTED FORMULATION
 Having computed the RHS of the augmented system in funcRa, we now have
 to build the complex augmented Jacobian matrix for the Newton scheme:
       ┌                                  ┐┌         ┐   ┌   ┐
       | J        dJ/dlambda    0         || dq      |   | R |
  (3)  |                                  || dlambda | = |   |
       | dg/dq'   dg/dlambda    dg/domega || domega  |   | g |
       └                                  ┘└         ┘   └   ┘
 where g = v'*L*w
 which gives, in real arithmetic:
    J*dq           + dJ/dlambda*dlambda                                = R
    real(dg/dq)*dq + real(dg/dlambda)*dlambda + real(dg/domega)*domega = real(g)
   -imag(dg/dq)*dq + imag(dg/dlambda)*dlambda + imag(dg/domega)*domega = imag(g)

 To determine the matrix entries, we differentiate Eq. (1) along each
 z in q, lambda, omega to find:
       ┌                 ┐┌       ┐   ┌         ┐
       | -L         M*p0 || dw/dz |   | dL/dz*w |
  (4)  |                 ||       | = |         |
       | (M*q0)'    0    || dg/dz |   | 0       |
       └                 ┘└       ┘   └         ┘
 We now left-multiply Eq. (4) by [ v'   conj(h) ], finding due to Eq. (2) that:

  (5)  dg/dz = v'*dL/dz*w

 So we can write (3) explicitly as
       ┌                                                          ┐┌         ┐   ┌         ┐
       |  dR/dq              dJ/dlambda              0            || dq      |   | R       |
  (3)  |  real(v'*dL/dq*w)   real(v'*dL/dlambda*w)  -imag(v'*M*w) || dlambda | = | real(g) |
       | -imag(v'*dL/dq*w)   imag(v'*dL/dlambda*w)   real(v'*M*w) || domega  |   | imag(g) |
       └                                                          ┘└         ┘   └         ┘
*/

load "iovtk"
load "PETSc-complex"
include "settings.idp"
include "macros_bifbox.idp"
// arguments
string meshin = getARGV("-mi", "");
string meshout = getARGV("-mo", "");
string filein = getARGV("-fi", "");
string basefilein = getARGV("-bfi", "");
string fileout = getARGV("-fo", "");
bool normalform = getARGV("-nf", 1);
bool wnlsave = getARGV("-wnl", 0);
int select = getARGV("-select", 1);
bool zerofreq = getARGV("-zero", 0);
string param = getARGV("-param", "");
string adaptto = getARGV("-adaptto", "b");
real eps = getARGV("-eps", 1e-7);
string sneslinesearchtype = getARGV("-snes_linesearch_type","basic");
real TGV = getARGV("-tgv", -1);
real[int] sym1(sym.n);
real omega;
complex[string] alpha;
complex beta;

// Load mesh, make FE basis
string fileroot, fileext = parsefilename(filein, fileroot); //extract file name and extension
parsefilename(fileout, fileout); // trim extension from output file, if given
if((fileext == "mode" || fileext == "resp" || fileext == "rslv" || fileext == "tdls" || fileext == "floq") && basefilein == "") basefilein = readbasename(workdir + filein);
string basefileroot, basefileext = parsefilename(basefilein, basefileroot);
if(meshin == "") meshin = readmeshname(workdir + filein); // get mesh file
string meshroot, meshext = parsefilename(meshin, meshroot);
parsefilename(meshout, meshout); // trim extension from output mesh, if given
Th = readmeshN(workdir + meshin);
Thg = Th;
buildDmesh(Th);
restu = restrict(XMh, XMhg, n2o);
XMh<complex> defu(ub), defu(um), defu(uma), defu(um2), defu(um3);
if (fileext == "hopf") {
  ub[].re = loadhopf(fileroot, meshin, um[], uma[], sym1, omega, alpha, beta);
}
else if (fileext == "foho") {
  real[string] alpha2;
  real beta22, beta23, gamma22, gamma23;
  complex gamma12, gamma13;
  real[int] q2m, q2ma;
  ub[].re = loadfoho(fileroot, meshin, um[], uma[], q2m, q2ma, sym1, omega, alpha, alpha2, beta, beta22, beta23, gamma12, gamma13, gamma22, gamma23);
}
else if(fileext == "hoho") {
  real omegaN;
  complex[string] alphaN;
  complex betaN, gamma1, gamma2, gamma12, gamma13, gamma22, gamma23;
  complex[int] qNm, qNma;
  if(select == 1){
    ub[].re = loadhoho(fileroot, meshin, um[], uma[], qNm, qNma, sym1, sym, omega, omegaN, alpha, alphaN, beta, betaN, gamma1, gamma2, gamma12, gamma13, gamma22, gamma23);
  }
  else if(select == 2){
    ub[].re = loadhoho(fileroot, meshin, qNm, qNma, um[], uma[], sym, sym1, omegaN, omega, alphaN, alpha, betaN, beta, gamma1, gamma2, gamma12, gamma13, gamma22, gamma23);
  }
}
else if (fileext == "mode") {
  complex eigenvalue;
  um[] = loadmode(fileroot, meshin, sym1, eigenvalue);
  omega = imag(eigenvalue);
}
else if (fileext == "resp") {
  um[] = loadresp(fileroot, meshin, sym1, omega);
}
else if (fileext == "rslv") {
  real gain;
  complex[int] fm;
  um[] = loadrslv(fileroot, meshin, fm, sym1, omega, gain);
}
else if(fileext == "porb") {
  int Nh=1;
  complex[int, int] qh(um[].n, Nh);
  ub[].re = loadporb(fileroot, meshin, qh, sym1, omega, Nh);
  um[] = qh(:, 0);
}
else if(fileext == "floq") {
  int Nh=1;
  complex[int, int] qh(um[].n, 2);
  complex eigenvalue;
  real[int] symtemp(sym.n);
  um[] = loadfloq(fileroot, meshin, qh, sym1, eigenvalue, symtemp, omega, Nh);
}
else assert(false); // invalid input filetype
if (basefileext == "base") {
  ub[].re = loadbase(basefileroot, meshin);
}
else if(basefileext == "fold") {
  real[string] alpha;
  real beta;
  real[int] qm, qma;
  ub[].re = loadfold(basefileroot, meshin, qm, qma, alpha, beta);
}
else if(basefileext == "hopf") {
  real omega;
  complex[string] alpha;
  complex beta;
  complex[int] qm, qma;
  ub[].re = loadhopf(basefileroot, meshin, qm, qma, sym, omega, alpha, beta);
}
else if(basefileext == "foho") {
  real omega;
  complex[string] alpha1;
  complex beta1, gamma12, gamma13;
  real[string] alpha2;
  real beta22, beta23, gamma22, gamma23;
  complex[int] q1m, q1ma;
  real[int] q2m, q2ma;
  ub[].re = loadfoho(basefileroot, meshin, q1m, q1ma, q2m, q2ma, sym, omega, alpha1, alpha2, beta1, beta22, beta23, gamma12, gamma13, gamma22, gamma23);
}
else if(basefileext == "hoho") {
  real[int] sym2(sym.n);
  real omega1, omega2;
  complex[string] alpha1, alpha2;
  complex beta1, beta2, gamma1, gamma2, gamma12, gamma13, gamma22, gamma23;
  complex[int] q1m, q1ma, q2m, q2ma;
  ub[].re = loadhoho(basefileroot, meshin, q1m, q1ma, q2m, q2ma, sym, sym2, omega1, omega2, alpha1, alpha2, beta1, beta2, gamma1, gamma2, gamma12, gamma13, gamma22, gamma23);
}
else if(basefileext == "tdns") {
  real time;
  ub[].re = loadtdns(basefileroot, meshin, time);
}
else if(basefileext == "porb") {
  int Nh=1;
  real omega;
  complex[int, int] qh(um[].n, Nh);
  ub[].re = loadporb(basefileroot, meshin, qh, sym, omega, Nh);
}
real lambda = getlambda(param);
// Create distributed Mat
Mat<complex> J;
createMatu(Th, J, Pk);
// MESH ADAPTATION
bool adapt = false;
if(meshout == "") meshout = meshin; // if no adaptation
else { // if output meshfile is given, adapt mesh
  adapt = true;
  meshout = meshout + "." + meshext;
  complex[int] q;
  ChangeNumbering(J, ub[], q);
  ChangeNumbering(J, ub[], q, inverse = true);
  ChangeNumbering(J, um[], q);
  ChangeNumbering(J, um[], q, inverse = true);
  ChangeNumbering(J, uma[], q);
  ChangeNumbering(J, uma[], q, inverse = true);
  XMhg defu(uG), defu(umrG), defu(umiG), defu(umarG), defu(umaiG), defu(tempu);
  tempu[](restu) = ub[].re; // populate local portion of global soln
  mpiAllReduce(tempu[], uG[], mpiCommWorld, mpiSUM);
  tempu[](restu) = um[].re; // populate local portion of global soln
  mpiAllReduce(tempu[], umrG[], mpiCommWorld, mpiSUM);
  tempu[](restu) = um[].im; // populate local portion of global soln
  mpiAllReduce(tempu[], umiG[], mpiCommWorld, mpiSUM);
  tempu[](restu) = uma[].re; // populate local portion of global soln
  mpiAllReduce(tempu[], umarG[], mpiCommWorld, mpiSUM);
  tempu[](restu) = uma[].im; // populate local portion of global soln
  mpiAllReduce(tempu[], umaiG[], mpiCommWorld, mpiSUM);
  if(mpirank == 0) {  // Perform mesh adaptation (serially) on processor 0
    IFMACRO(dimension,2)
      if(adaptto == "b") Thg = adaptmesh(Thg, adaptu(uG), adaptmeshoptions);
      else if(adaptto == "bd") Thg = adaptmesh(Thg, adaptu(uG), adaptu(umrG), adaptu(umiG), adaptmeshoptions);
      else if(adaptto == "ba") Thg = adaptmesh(Thg, adaptu(uG), adaptu(umarG), adaptu(umaiG), adaptmeshoptions);
      else if(adaptto == "bda") Thg = adaptmesh(Thg, adaptu(uG), adaptu(umrG), adaptu(umiG), adaptu(umarG), adaptu(umaiG), adaptmeshoptions);
    ENDIFMACRO
    IFMACRO(dimension,3)
      cout << "NOTE: 3D mesh adaptation is still under development." << endl;
      load "mshmet"
      load "mmg"
      real anisomax = getARGV("-anisomax",1.0);
      real[int] met((bool(anisomax > 1) ? 6 : 1)*Thg.nv);
      if(adaptto == "b") met = mshmet(Thg, adaptu(uG), normalization = getARGV("-normalization",1), aniso = bool(anisomax > 1.0),hmin = getARGV("-hmin", 1.0e-6), hmax = getARGV("-hmax", 1.0e+2), err = getARGV("-err", 1.0e-2));
      else if(adaptto == "bd") met = mshmet(Thg, adaptu(uG), adaptu(umrG), adaptu(umiG), normalization = getARGV("-normalization",1), aniso = bool(anisomax > 1.0),hmin = getARGV("-hmin", 1.0e-6), hmax = getARGV("-hmax", 1.0e+2), err = getARGV("-err", 1.0e-2));
      else if(adaptto == "ba") met = mshmet(Thg, adaptu(uG), adaptu(umarG), adaptu(umaiG), normalization = getARGV("-normalization",1), aniso = bool(anisomax > 1.0),hmin = getARGV("-hmin", 1.0e-6), hmax = getARGV("-hmax", 1.0e+2), err = getARGV("-err", 1.0e-2));
      else if(adaptto == "bda") met = mshmet(Thg, adaptu(uG), adaptu(umrG), adaptu(umiG), adaptu(umarG), adaptu(umaiG), normalization = getARGV("-normalization",1), aniso = bool(anisomax > 1.0),hmin = getARGV("-hmin", 1.0e-6), hmax = getARGV("-hmax", 1.0e+2), err = getARGV("-err", 1.0e-2));
      if(anisomax > 1.0) {
        load "aniso"
        boundaniso(6, met, anisomax);
      }
      Thg = mmg3d(Thg, metric = met, hmin = getARGV("-hmin", 1.0e-6), hmax = getARGV("-hmax", 1.0e+2), hgrad = -1, verbose = verbosity-(verbosity==0));
    ENDIFMACRO
  } // TODO: add adaptation to endogeneity and structural sensitivity
  broadcast(processor(0), Thg);
  defu(uG) = defu(uG);
  defu(umrG) = defu(umrG);
  defu(umiG) = defu(umiG);
  defu(umarG) = defu(umarG);
  defu(umaiG) = defu(umaiG);
  Th = Thg;
  Mat<complex> Adapt;
  createMatu(Th, Adapt, Pk);
  J = Adapt;
  defu(ub) = initu(0.0);
  defu(um) = initu(0.0);
  defu(uma) = initu(0.0);
  defu(um2) = initu(0.0);
  defu(um3) = initu(0.0);
  restu.resize(ub[].n); // Change size of restriction operator
  restu = restrict(XMh, XMhg, n2o); // Compute new restriction from global mesh to local mesh
  ub[].re = uG[](restu);
  um[].re = umrG[](restu);
  um[].im = umiG[](restu);
  uma[].re = umarG[](restu);
  uma[].im = umaiG[](restu);
}
// Build bordered block matrix from only Mat components
complex[int] ik(sym.n), ik2(sym.n), ik3(sym.n);
complex iomega, iomega2 = 0.0, iomega3 = 0.0;
include "eqns.idp"
Mat<complex> JlPM(J.n, mpirank == 0 ? (2-zerofreq) : 0), gqPM(J.n, mpirank == 0 ? (2-zerofreq) : 0), glPM(mpirank == 0 ? (2-zerofreq) : 0, mpirank == 0 ? (2-zerofreq) : 0); // Initialize Mat objects for bordered matrix
Mat<complex> Ja = [[J, JlPM], [gqPM', glPM]]; // make dummy Jacobian
complex[int] R(ub[].n), qm(J.n), qma(J.n), pP(J.n), qP(J.n);
// FUNCTIONS
  func PetscScalar[int] funcRa(PetscScalar[int]& qa) {
      ChangeNumbering(J, ub[], qa(0:J.n-1), inverse = true, exchange = true); // PETSc to FreeFEM
      if(mpirank == 0) {
        lambda = real(qa(J.n)); // Extract parameter value from state vector on proc 0
        omega = zerofreq ? 0.0 : real(qa(Ja.n-1)); // Extract frequency value from state vector on proc 0
      }
      broadcast(processor(0), lambda);
      broadcast(processor(0), omega);
      updatelambda(param, lambda);
      sym = 0;
      R = vR(0, XMh, tgv = TGV);
      PetscScalar[int] Ra;
      ChangeNumbering(J, R, Ra); // FreeFEM to PETSc
      sym = sym1;
      iomega = 1i*omega;
      ik.im = sym1;
      J = vJ(XMh, XMh, tgv = -2);
      KSPSolve(J, pP, qm);
      KSPSolveHermitianTranspose(J, qP, qma);
      PetscScalar ginv, ginvl = (qP'*qm);
      mpiAllReduce(ginvl, ginv, mpiCommWorld, mpiSUM);
      qm /= ginv; // rescale direct mode
      qma /= conj(ginv); // rescale adjoint mode
      Ra.resize(Ja.n); // Append 0 to residual vector on proc 0
      if(mpirank == 0) {
        Ra(J.n) = real(1.0/ginv);
        if (!zerofreq) Ra(Ja.n-1) = imag(1.0/ginv);
      }
      return Ra;
  }

  func int funcJa(PetscScalar[int]& qa) {
      ChangeNumbering(J, ub[], qa(0:J.n-1), inverse = true, exchange = true); // PETSc to FreeFEM
      if(mpirank == 0) {
        lambda = real(qa(J.n)); // Extract parameter value from state vector on proc 0
        omega = zerofreq ? 0.0 : real(qa(Ja.n-1)); // Extract frequency value from state vector on proc 0
      }
      broadcast(processor(0), lambda);
      broadcast(processor(0), omega);
      ChangeNumbering(J, um[], qm, inverse = true, exchange = true);
      ChangeNumbering(J, uma[], qma, inverse = true);
      updatelambda(param, lambda + eps);
      sym = 0;
      um2[] = vR(0, XMh, tgv = TGV);
      um2[] -= R;
      um2[] /= eps;
      ChangeNumbering(J, um2[], qm);
      matrix<PetscScalar> tempPms;
      if(zerofreq) tempPms = [[qm]];
      else tempPms = [[qm, 0]]; // dense array to sparse matrix
      ChangeOperator(JlPM, tempPms, parent = Ja); // send to Mat
      sym = sym1;
      ik.im = sym1;
      iomega = 1i*omega;
      um2[] = vJ(0, XMh, tgv = -10);
      updatelambda(param, lambda);
      um3[] = vJ(0, XMh, tgv = -10);
      um2[] -= um3[];
      PetscScalar gl = J(uma[], um2[])/eps;
      if(zerofreq) tempPms = [[real(gl)]];
      else {
        um2[] = vM(0, XMh, tgv = -10);
        PetscScalar gw = J(uma[], um2[]);
        tempPms = [[real(gl), -imag(gw)], [imag(gl), real(gw)]];
      }
      ChangeOperator(glPM, tempPms, parent = Ja); // send to Mat
      sym = 0;
      J = vH(XMh, XMh, tgv = 0); // form the matrix (dL/dq*w)
      MatMultHermitianTranspose(J, qma, qm); // compute (dL/dq*w)'*v
      if(!zerofreq) qma.re = -qm.im;
      qm.im = 0.0;
      qma.im = 0.0;
      if(zerofreq) tempPms = [[qm]];
      else tempPms = [[qm, qma]]; // dense array to sparse matrix
      ChangeOperator(gqPM, tempPms, parent = Ja); // send to Mat
      ik = 0.0;
      iomega = 0.0;
      J = vJ(XMh, XMh, tgv = TGV);
      return 0;
  }
// set up Mat parameters
IFMACRO(Jprecon) Jprecon(0); ENDIFMACRO
set(Ja, sparams = "-ksp_type preonly -pc_type fieldsplit -pc_fieldsplit_type schur -pc_fieldsplit_schur_precondition full"
                + " -prefix_push fieldsplit_1_ -ksp_type preonly -pc_type redundant -redundant_pc_type lu -prefix_pop"
                + " -prefix_push fieldsplit_0_ " + KSPparams + " -prefix_pop", setup = 1);
set(J, IFMACRO(Jsetargs) Jsetargs, ENDIFMACRO prefix = "fieldsplit_0_", parent = Ja);
// Initialize
complex[int] qa;
ChangeNumbering(J, ub[], qa);
qa.resize(Ja.n);
if(mpirank == 0) {
  qa(J.n) = lambda;
  if(!zerofreq) qa(Ja.n-1) = omega;
}
sym = sym1;
ik.im = sym1;
iomega = 1i*omega;
um2[] = vM(0, XMh, tgv = -10);
ChangeNumbering(J, um[], qm);
ChangeNumbering(J, um[], qm, inverse = true);
real Mnorm = sqrt(real(J(um[], um2[])));
um2[] /= Mnorm;
ChangeNumbering(J, um2[], qP);
if (fileext == "hopf" || fileext == "hoho" || fileext == "foho") um[] = uma[];
else {
  J = vJ(XMh, XMh, tgv = -2);
  KSPSolveHermitianTranspose(J, qP, qma);
  ChangeNumbering(J, um[], qma, inverse = true, exchange = true);
}
um2[] = vM(0, XMh, tgv = 0);
ChangeNumbering(J, um[], qm, inverse = true);
um2[] *= (Mnorm/J(um[], um2[])); // so that <uma[],M*um[]> = 1
ChangeNumbering(J, um2[], pP);
// solve nonlinear problem with SNES
int ret;
SNESSolve(Ja, funcJa, funcRa, qa, reason = ret,
          sparams = "-snes_linesearch_type " + sneslinesearchtype + " -snes_monitor -snes_converged_reason -options_left no");
if (ret > 0) { // Save solution if solver converged and output file is given
  ChangeNumbering(J, ub[], qa(0:J.n-1), inverse = true, exchange = true);
  if(mpirank == 0) {
    lambda = real(qa(J.n));
    omega = zerofreq ? 0.0 : real(qa(Ja.n-1)); // Extract frequency value from state vector on proc 0
  }
  broadcast(processor(0), lambda);
  broadcast(processor(0), omega);
  updatelambda(param, lambda);
  ChangeNumbering(J, um[], qm, inverse = true, exchange = true);
  sym = sym1;
  ik.im = sym1;
  um2[] = vM(0, XMh, tgv = 0);
  ChangeNumbering(J, um[], qm, inverse = true);
  ChangeNumbering(J, uma[], qma, inverse = true);
  Mnorm = sqrt(real(J(um[], um2[])));
  um[] /= Mnorm; // so that <um[],M*um[]> = 1
  uma[] *= (Mnorm/J(um2[], uma[])); // so that <uma[],M*um[]> = 1
  ChangeNumbering(J, um[], qm);
  ChangeNumbering(J, uma[], qma);
  if (normalform){
    complex[int,int] qDa(paramnames.n, J.n);
    // 2nd-order
    //  A: base modification due to parameter changes
    ik = 0.0;
    ik2 = 0.0;
    iomega = 0.0;
    iomega2 = 0.0;
    sym = 0;
    J = vJ(XMh, XMh, tgv = TGV);
    if(paramnames[0] != ""){
      for (int k = 0; k < paramnames.n; ++k){
        lambda = getlambda(paramnames[k]);
        updatelambda(paramnames[k], lambda + eps);
        um[] = vR(0, XMh, tgv = TGV);
        updatelambda(paramnames[k], lambda);
        um[] -= R;
        um[] /= -eps;
        ChangeNumbering(J, um[], qP);
        KSPSolve(J, qP, qP);
        qDa(k, :) = qP;
      }
    }
    //  B: base modification due to quadratic nonlinear interaction
    ik.im = sym1;
    ik2.im = -sym1;
    iomega = 1i*omega;
    iomega2 = -iomega;
    ChangeNumbering(J, um[], qm, inverse = true, exchange = true);
    um2[] = conj(um[]);
    um3[] = vH(0, XMh, tgv = -10);
    um3[].re *= -1.0; // -2.0/2.0
    um3[].im = 0.0;
    ChangeNumbering(J, um3[], qP);
    KSPSolve(J, qP, qP);
    //  C: harmonic generation due to quadratic nonlinear interaction
    ik2.im = sym1;
    iomega2 = iomega;
    um2[] = -0.5*um[];
    sym = 2*sym1;
    um3[] = vH(0, XMh, tgv = -10);
    ChangeNumbering(J, um3[], pP);
    ik.im = 2*sym1;
    iomega = 2i*omega;
    J = vJ(XMh, XMh, tgv = TGV);
    KSPSolve(J, pP, pP);
    // 3rd-order
    //  A: fundamental modification due to parameter change and quadratic interaction of fundamental with 2nd order modification A.
    sym = sym1;
    ik.im = sym1;
    ik2 = 0.0;
    iomega = 1i*omega;
    iomega2 = 0.0;
    if(paramnames[0] != ""){
      R = vJ(0, XMh, tgv = -10);
      for (int k = 0; k < paramnames.n; ++k){
        ChangeNumbering(J, um2[], qDa(k, :), inverse = true, exchange = true);
        um3[] = vH(0, XMh, tgv = -10);
        lambda = getlambda(paramnames[k]);
        updatelambda(paramnames[k], lambda + eps);
        um2[] = vJ(0, XMh, tgv = -10);
        updatelambda(paramnames[k], lambda);
        um2[] -= R;
        um3[] += um2[]/eps;
        alpha[paramnames[k]] = -J(uma[], um3[]);
      }
    }
    //  B: fundamental modification due to cubic self-interaction of fundamental
    ik2.im = sym1;
    ik3.im = -sym1;
    iomega2 = iomega;
    iomega3 = -iomega;
    um2[] = 0.5*um[];
    um3[] = conj(um[]);
    R = vT(0, XMh, tgv = -10);
    //  C: fundamental modification due to quadratic interaction of fundamental with 2nd order modification B
    ik2 = 0.0;
    iomega2 = 0.0;
    ChangeNumbering(J, um2[], qP, inverse = true, exchange = true);
    um3[] = vH(0, XMh, tgv = -10);
    R += um3[];
    //  D: fundamental modification due to quadratic interaction of fundamental with 2nd order modification C
    ik.im = -sym1;
    ik2.im = 2*sym1;
    iomega = -iomega;
    iomega2 = 2i*omega;
    um[] = conj(um[]);
    ChangeNumbering(J, um2[], pP, inverse = true, exchange = true);
    um3[] = vH(0, XMh, tgv = -10);
    R += um3[];
    beta = -J(uma[], R);
    if(wnlsave){
      complex[int] val(1);
      XMh<complex>[int] defu(vec)(1);
      sym = 0;
      val = 0.0;
      if(paramnames[0] != ""){
        for (int k = 0; k < paramnames.n; ++k){
          ChangeNumbering(J, vec[0][], qDa(k, :), inverse = true);
          savemode(fileout + "_wnl_param" + k, "", fileout + ".hopf", meshout, vec, val, sym, true);
        }
      }
      ChangeNumbering(J, vec[0][], qP, inverse = true);
      savemode(fileout + "_wnl_AAs", "", fileout + ".hopf", meshout, vec, val, sym, true);
      ChangeNumbering(J, vec[0][], pP, inverse = true);
      val = 2i*omega;
      sym = 2*sym1;
      savemode(fileout + "_wnl_AA", "", fileout + ".hopf", meshout, vec, val, sym, true);
    }
  } else {
    if(paramnames[0] != ""){
      for (int k = 0; k < paramnames.n; ++k){
        alpha[paramnames[k]] = 0.0;
      }
    }
    beta = 0.0;
  }
  if(mpirank==0 && adapt) { // Save adapted mesh
    cout << "  Saving adapted mesh '" + meshout + "' in '" + workdir + "'." << endl;
    savemesh(Thg, workdir + meshout);
  }
  ChangeNumbering(J, ub[], qa(0:J.n-1), inverse = true);
  ChangeNumbering(J, um[], qm, inverse = true);
  savehopf(fileout, "", meshout, sym1, omega, alpha, beta, true, true);
}