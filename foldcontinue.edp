//
// foldcontinue.edp
// Chris Douglas
// chris.douglas@ladhyx.polytechnique.fr
//
// EXAMPLE USAGE:
//  Initialize with fold from file, solve on same mesh
// mpirun -n 4 FreeFem++-mpi -v 0 foldcontinue.edp -param1 <PARAM1> -param1 <PARAM2> -fi <FILEIN> -fo <FILEOUT>
//
//  Initialize with fold from file, adapt mesh/solution
// mpirun -n 4 FreeFem++-mpi -v 0 foldcontinue.edp -param1 <PARAM1> -param1 <PARAM2> -fi <FILEIN> -fo <FILEOUT> -mo <MESHOUT>
//
// NOTE: This file should not be changed unless you know what you're doing.
//
load "iovtk"
load "PETSc"
include "settings.idp"
include "macros_bifbox.idp"
// arguments
string meshin = getARGV("-mi", ""); // input meshfile with extension
string meshout = getARGV("-mo", "");
string filein = getARGV("-fi", "");
string fileout = getARGV("-fo", filein);
int count = getARGV("-count", 0);
int savecount = getARGV("-scount", 1);
int maxcount = getARGV("-maxcount", 100);
real h0 = getARGV("-h0", 1.0);
string param1 = getARGV("-param1","");
string param2 = getARGV("-param2","");
string adaptto = getARGV("-adaptto","b");
real fmax = getARGV("-fmax", 2.0);
real kappamax = getARGV("-kmax", 1.0);
real deltamax = getARGV("-dmax", 4.0);
real alphamax = getARGV("-amax", 30.)*pi/180.0;
int monotone = getARGV("-mono", 0);
real eps1 = getARGV("-eps1", 1e-7);
real eps2 = getARGV("-eps2", 1e-7);
string ksptype = getARGV("-ksp_type", "preonly");
string pctype = getARGV("-pc_type", "lu");
real snesrtol = getARGV("-snes_rtol", 0.0);
int snesmaxit = getARGV("-snes_max_it", 10);
string sneslinesearchtype = getARGV("-snes_linesearch_type","basic"); // set -snes_linesearch_type
int m;

// Load mesh, make FE basis
string fileroot, meshroot;
string fileext = parsefilename(filein, fileroot); //extract file name and extension
parsefilename(fileout, fileout); // trim extension from output file, if given
if(meshin == "") meshin = readmeshname(workdir + filein); // get mesh file
string meshext = parsefilename(meshin, meshroot);
parsefilename(meshout, meshroot); // trim extension from output mesh, if given
if(count > 0) {
  fileroot = fileroot(0:fileroot.rfind("_" + count)-1); // get file root
  meshroot = meshroot(0:meshroot.rfind("_" + count)-1); // get file root
}
assert(fileext == "fold");
bool adapt = false;
if(meshout == "") meshout = meshin; // if no adaptation
else adapt = true;  // if output meshfile is given, adapt mesh
Th = readmeshN(workdir + meshin);
Thg = Th;
buildDmesh(Th);
restu = restrict(XMh, XMhg, n2o);
XMh defu(ub), defu(um), defu(uma), defu(yb), defu(um2);
if (count == 0){
  ub[] = loadfold(fileroot, meshin, um[], uma[]);
  if(mpirank == 0) printstats(fileout, filein, meshin, 0, 0, 0);
}
else {
  ub[] = loadfold(fileroot + "_" + count, meshin, um[], uma[]);
}
real lambda1 = getlambda(param1);
real lambda2 = getlambda(param2);
// Create distributed Mat
Mat J;
createMatu(Th, J, Pk);
real ik = 0.0, ik2 = 0.0, iomega = 0.0;
include "eqns.idp"

// Build bordered block matrix from only Mat components
Mat JlPM(J.n, mpirank == 0 ? 1 : 0), gqPM(J.n, mpirank == 0 ? 1 : 0), glPM(mpirank == 0 ? 1 : 0, mpirank == 0 ? 1 : 0); // Initialize Mat objects for bordered matrix
Mat JlPMa(J.n + (mpirank == 0 ? 1 : 0), mpirank == 0 ? 1 : 0), yqPMa(J.n + (mpirank == 0 ? 1 : 0), mpirank == 0 ? 1 : 0); // Initialize Mat objects for bordered matrix
Mat H(J), Ja = [[J, JlPM], [gqPM', glPM]], Jaa = [[Ja, JlPMa], [yqPMa', -1.0]]; // make dummy Jacobian

real[int] qm(J.n), qma(J.n), pP(J.n), qP(J.n), yqP(J.n), yqP0(J.n), qap(J.n + (mpirank == 0 ? 2 : 0));
int it, internalit, adaptflag;
real f, kappa, alpha, res, resp, delta, deltap, maxdelta, yl1, yl10;
// FUNCTIONS
  func real[int] funcRa(real[int]& qa) {
      ChangeNumbering(J, ub[], qa(0:qa.n - (mpirank == 0 ? 3 : 1)), inverse = true, exchange = true); // PETSc to FreeFEM
      if(mpirank == 0) {
        lambda1 = qa(qa.n-2); // Extract parameter value from state vector on proc 0
        lambda2 = qa(qa.n-1); // Extract parameter value from state vector on proc 0
      }
      broadcast(processor(0), lambda1);
      broadcast(processor(0), lambda2);
      updatelambda(param1, lambda1);
      updatelambda(param2, lambda2);
      real[int] Ra, R = vR(0, XMh, tgv = -1);
      ChangeNumbering(J, R, Ra); // FreeFEM to PETSc
      J = vJ(XMh, XMh, tgv = -1);
      KSPSolve(J, pP, qm);
      KSPSolveTranspose(J, qP, qma);
      ChangeNumbering(J, yb[], qP, inverse = true);
      ChangeNumbering(J, um[], qm, inverse = true);
      real g = 1.0/J(yb[], um[]);
      qm *= g;
      qma *= g;
      if(mpirank == 0) {
          Ra.resize(Ra.n+2); // Append 0 to residual vector on proc 0
          Ra(Ra.n-2) = g;
          Ra(Ra.n-1) = 0.0;
      }
      res = sqrt(J(R, R) + g^2);
      string text1;
      if (!adaptflag) text1 = count + "-" + it;
      else text1 = "A" + (count-1) + "-" + it;
      if(internalit > 0) text1 = text1 + ">" + internalit;
      if (it == 0){
        kappa = 0.0;
        maxdelta = 0.0;
        alpha = 0.0;
        delta = abs(h0);
        if(mpirank == 0) cout << "  " + text1 + ":\t||R|| = " << res << ",\th0 = " << h0 << ",\t" + param1 + " = " << lambda1 << ",\t" + param2 + " = " << lambda2 << "." << endl;
      }
      else {
        real dlambda1, dlambda2;
        real[int] qdiff  = qa - qap;
        if(mpirank == 0) {
          dlambda1 = qdiff(qdiff.n-2); // Extract parameter value from state vector on proc 0
          dlambda2 = qdiff(qdiff.n-1); // Extract parameter value from state vector on proc 0
        }
        broadcast(processor(0), dlambda1);
        broadcast(processor(0), dlambda2);
        ChangeNumbering(J, R, qdiff(0:qdiff.n - (mpirank == 0 ? 3 : 1)), inverse = true);
        delta = sqrt(J(R, R) + dlambda1^2 + dlambda2^2); // distance to curve
        ChangeNumbering(J, R, yqP0, inverse = true);
        ChangeNumbering(J, yb[], yqP, inverse = true);
        alpha = (J(R, yb[]) + yl10*yl1 + 1.0)/sqrt((J(R, R) + yl10^2 + 1.0)*(J(yb[], yb[]) + yl1^2 + 1.0));
        kappa = max(delta/deltap, kappa);
        maxdelta = max(delta, maxdelta);
        if(mpirank == 0) cout << "  " + text1 + ":\t||R|| = " << res << ",\t||dx|| = " << delta << ",\tangle = " << (sign(alpha)*acos(abs(alpha))*180./pi) << ",\t" + param1 + " = " << lambda1 << ",\t" + param2 + " = " << lambda2 << "." << endl;
      }
      f = max(acos(abs(alpha))/alphamax*fmax, sqrt(maxdelta/deltamax)*fmax, sqrt(kappa/kappamax)*fmax, 1./fmax);
      if (it > 0 && !adaptflag && (f > fmax || it-1 >= snesmaxit || res*(monotone!=0) > resp)) Ra(0) = NaN();
      ++internalit;
      return Ra;
  }

  func int funcJa(real[int]& qa) {
      ++it;
      internalit = 0;
      qap = qa;
      resp = res;
      deltap = delta;
      ChangeNumbering(J, ub[], qa(0:qa.n - (mpirank == 0 ? 3 : 1)), inverse = true, exchange = true); // PETSc to FreeFEM
      if(mpirank == 0) {
        lambda1 = qa(qa.n-2); // Extract parameter value from state vector on proc 0
        lambda2 = qa(qa.n-1); // Extract parameter value from state vector on proc 0
      }
      broadcast(processor(0), lambda1);
      broadcast(processor(0), lambda2);
      ChangeNumbering(J, um[], qm, inverse = true, exchange = true);
      ChangeNumbering(J, uma[], qma, inverse = true, exchange = true);
      updatelambda(param1, lambda1 + eps1);
      updatelambda(param2, lambda2);
      real[int] Jl1 = vR(0, XMh, tgv = -1);
      real[int] Hl1 = vJ(0, XMh, tgv = -10);
      updatelambda(param1, lambda1);
      updatelambda(param2, lambda2 + eps2);
      real[int] Jl2 = vR(0, XMh, tgv = -1);
      real[int] Hl2 = vJ(0, XMh, tgv = -10);
      updatelambda(param2, lambda2);
      real[int] a0 = vR(0, XMh, tgv = -1);
      Jl1 -= a0;
      Jl2 -= a0;
      Jl1 /= eps1;
      Jl2 /= eps2;
      a0 = vJ(0, XMh, tgv = -10);
      Hl1 -= a0;
      Hl2 -= a0;
      Hl1 /= eps1;
      Hl2 /= eps2;
      ChangeNumbering(J, Jl1, yqP); // FreeFEM to PETSc
      matrix tempPms = [[yqP]]; // dense array to sparse matrix
      ChangeOperator(JlPM, tempPms, parent = Ja); // send to Mat
      tempPms = [[J(uma[], Hl1)]];
      ChangeOperator(glPM, tempPms, parent = Ja); // send to Mat
      H = vH(XMh, XMh, tgv = -10);
      MatMultTranspose(H, qma, yqP);
      tempPms = [[yqP]];
      ChangeOperator(gqPM, tempPms, parent = Ja); // send to Mat
      ChangeNumbering(J, Jl2, yqP); // FreeFEM to PETSc
      real gl2 = J(uma[], Hl2);
      if (mpirank == 0) {
        yqP.resize(yqP.n+1);
        yqP(yqP.n-1) = gl2;
      }
      tempPms = [[yqP]]; // dense array to sparse matrix
      ChangeOperator(JlPMa, tempPms, parent = Jaa); // send to Mat
      KSPSolve(Ja, yqP, yqP);
      tempPms = [[yqP]]; // dense array to sparse matrix
      ChangeOperator(yqPMa, tempPms, parent = Jaa); // send to Mat
      if (mpirank == 0) {
        yl1 = yqP(yqP.n-1);
        yqP.resize(yqP.n-1);
      }
      broadcast(processor(0), yl1);
      return 0;
  }

// fix indexing problem
set(Jaa, sparams = "-ksp_type preonly -pc_type fieldsplit -pc_fieldsplit_type schur -pc_fieldsplit_schur_precondition self", setup = 1);
set(Ja, sparams = "-prefix_push fieldsplit_0_ -ksp_type preonly -pc_type fieldsplit -pc_fieldsplit_type schur -pc_fieldsplit_schur_precondition self -prefix_pop", prefix = "fieldsplit_0_", parent = Jaa, setup = 1);
set(J, sparams = "-prefix_push fieldsplit_0_fieldsplit_0_ -ksp_type " + ksptype + " -pc_type " + pctype + " " + KSPparams + " -prefix_pop", prefix = "fieldsplit_0_fieldsplit_0_", parent = Ja);

// PREDICTOR
real[int] qa;
ChangeNumbering(J, ub[], qa);
ChangeNumbering(J, ub[], qa, inverse = true, exchange = true);
ChangeNumbering(J, um[], qm);
ChangeNumbering(J, um[], qm, inverse = true, exchange = true);
ChangeNumbering(J, uma[], qma);
ChangeNumbering(J, uma[], qma, inverse = true, exchange = true);
if(mpirank == 0) {
  qa.resize(qa.n+2);
  qa(qa.n-2) = lambda1;
  qa(qa.n-1) = lambda2;
}
{
  updatelambda(param1, lambda1 + eps1);
  updatelambda(param2, lambda2);
  real[int] Jl1 = vR(0, XMh, tgv = -1);
  real[int] Hl1 = vJ(0, XMh, tgv = -10);
  updatelambda(param1, lambda1);
  updatelambda(param2, lambda2 + eps2);
  real[int] Jl2 = vR(0, XMh, tgv = -1);
  real[int] Hl2 = vJ(0, XMh, tgv = -10);
  updatelambda(param2, lambda2);
  real[int] a0 = vR(0, XMh, tgv = -1);
  Jl1 -= a0;
  Jl1 /= eps1;
  Jl2 -= a0;
  Jl2 /= eps2;
  a0 = vJ(0, XMh, tgv = -10);
  Hl1 -= a0;
  Hl1 /= eps1;
  Hl2 -= a0;
  Hl2 /= eps2;
  J = vJ(XMh, XMh, tgv = -1);
  ChangeNumbering(J, Jl1, yqP); // FreeFEM to PETSc
  matrix tempPms = [[yqP]]; // dense array to sparse matrix
  ChangeOperator(JlPM, tempPms, parent = Ja); // send to Mat
  tempPms = [[J(uma[], Hl1)]];
  ChangeOperator(glPM, tempPms, parent = Ja); // send to Mat
  H = vH(XMh, XMh, tgv = -10);
  MatMultTranspose(H, qma, yqP);
  tempPms = [[yqP]];
  ChangeOperator(gqPM, tempPms, parent = Ja); // send to Mat
  ChangeNumbering(J, Jl2, yqP); // FreeFEM to PETSc
  real gl2 = J(uma[], Hl2);
  if (mpirank == 0) {
    yqP.resize(yqP.n+1);
    yqP(yqP.n-1) = gl2;
  }
  KSPSolve(Ja, yqP, yqP);
  if (mpirank == 0) {
    yl1 = yqP(yqP.n-1);
    yqP.resize(yqP.n-1);
  }
  broadcast(processor(0), yl1);
}
yqP0 = yqP;
yl10 = yl1;
qP = qm;
pP = qma;
while (count < maxcount){
  real[int] qa0 = qa;
  ChangeNumbering(J, yb[], yqP, inverse = true); // PETSc to FreeFEM
  real h = h0/sqrt(J(yb[], yb[]) + yl1^2 + 1.0); // use FreeFEM numbering here
  qa(0:qa.n - (mpirank == 0 ? 3 : 1)) -= (h*yqP);
  if (mpirank == 0) {
    qa(qa.n-2) -= h*yl1;
    qa(qa.n-1) += h;
    lambda1 = qa(qa.n-2);
    lambda2 = qa(qa.n-1);
  }
  broadcast(processor(0), lambda1);
  broadcast(processor(0), lambda2);
  updatelambda(param1, lambda1);
  updatelambda(param2, lambda2);
  // CORRECTOR LOOP
  int ret;
  it = 0;
  internalit = 0;
  adaptflag = 0;
  SNESSolve(Jaa, funcJa, funcRa, qa, reason = ret,
            sparams = " -snes_rtol " + snesrtol
                    + " -snes_linesearch_type " + sneslinesearchtype
                    + " -snes_max_it " + snesmaxit
                    + " -snes_converged_reason "
                    ); // solve nonlinear problem with SNES
  if (ret > 0) {
    ++count;
    h0 /= f;
    if (alpha < 0) {
      h0 *= -1.0;
      ChangeNumbering(J, ub[], qa(0:qa.n - (mpirank == 0 ? 3 : 1)), inverse = true);
      if(mpirank == 0) {
        lambda1 = qa(qa.n-2);
        lambda2 = qa(qa.n-1);
      }
      broadcast(processor(0), lambda1);
      broadcast(processor(0), lambda2);
      updatelambda(param1, lambda1);
      updatelambda(param2, lambda2);
      if(mpirank == 0) cout << "\tSign change detected. Orientation reversed." << endl;
      ChangeNumbering(J, um[], qm, inverse = true);
      ChangeNumbering(J, uma[], qma, inverse = true);
      um[] /= sqrt(J(um[], um[]));
      uma[] /= sqrt(J(uma[], uma[]));
      savefold(fileout + "_" + count + "signswitch", "", meshout, true, true);
    }
    if (adapt && (count % savecount == 0)){
      meshout = meshroot + "_" + count + "." + meshext;
      ChangeNumbering(J, ub[], qa(0:qa.n - (mpirank == 0 ? 3 : 1)), inverse = true);
      if(mpirank == 0) {
        lambda1 = qa(qa.n-2);
        lambda2 = qa(qa.n-1);
      }
      broadcast(processor(0), lambda1);
      broadcast(processor(0), lambda2);
      updatelambda(param1, lambda1);
      updatelambda(param2, lambda2);
      ChangeNumbering(J, um[], qm, inverse = true);
      ChangeNumbering(J, uma[], qma, inverse = true);
      ChangeNumbering(J, yb[], yqP, inverse = true);
      XMhg defu(uG), defu(umG), defu(umaG), defu(yG), defu(tempu);
      for[i, v : restu] tempu[][v] = ub[][i];
      mpiAllReduce(tempu[], uG[], mpiCommWorld, mpiSUM);
      for[i, v : restu] tempu[][v] = yb[][i];
      mpiAllReduce(tempu[], yG[], mpiCommWorld, mpiSUM);
      for[i, v : restu] tempu[][v] = um[][i]; // populate local portion of global soln
      mpiAllReduce(tempu[], umG[], mpiCommWorld, mpiSUM); //aggregate local solns into global soln
      for[i, v : restu] tempu[][v] = uma[][i]; // populate local portion of global soln
      mpiAllReduce(tempu[], umaG[], mpiCommWorld, mpiSUM); //aggregate local solns into global soln
      if(mpirank == 0) {  // Perform mesh adaptation (serially) on processor 0
        if(adaptto == "b") Thg = adaptmesh(Thg, adaptu(uG), adaptmeshoptions);
        else if(adaptto == "by") Thg = adaptmesh(Thg, adaptu(uG), adaptu(yG), adaptmeshoptions);
        else if(adaptto == "bd") Thg = adaptmesh(Thg, adaptu(uG), adaptu(umG), adaptmeshoptions);
        else if(adaptto == "ba") Thg = adaptmesh(Thg, adaptu(uG), adaptu(umaG), adaptmeshoptions);
        else if(adaptto == "byd") Thg = adaptmesh(Thg, adaptu(uG), adaptu(yG), adaptu(umG), adaptmeshoptions);
        else if(adaptto == "bya") Thg = adaptmesh(Thg, adaptu(uG), adaptu(yG), adaptu(umaG), adaptmeshoptions);
        else if(adaptto == "bda") Thg = adaptmesh(Thg, adaptu(uG), adaptu(umG), adaptu(umaG), adaptmeshoptions);
        else if(adaptto == "byda") Thg = adaptmesh(Thg, adaptu(uG), adaptu(yG), adaptu(umG), adaptu(umaG), adaptmeshoptions);
      } // TODO: add adaptation to endogeneity and structural sensitivity
      broadcast(processor(0), Thg); // broadcast global mesh to all processors
      defu(uG) = defu(uG); //interpolate global solution from old mesh to new mesh
      defu(yG) = defu(yG); //interpolate global solution from old mesh to new mesh
      defu(umG) = defu(umG); //interpolate global solution from old mesh to new mesh
      defu(umaG) = defu(umaG); //interpolate global solution from old mesh to new mesh
      Th = Thg;
      Mat Adapt;
      createMatu(Th, Adapt, Pk);
      J = Adapt;
      defu(ub) = initu(0.0);
      defu(yb) = initu(0.0);
      defu(um) = initu(0.0);
      defu(uma) = initu(0.0);
      restu.resize(ub[].n); // Change size of restriction operator
      restu = restrict(XMh, XMhg, n2o); // Compute new restriction from global mesh to local mesh
      ub[] = uG[](restu);
      yb[] = yG[](restu);
      um[] = umG[](restu);
      uma[] = umaG[](restu);
      Mat Adapt0(J), Adapt1(J.n, mpirank == 0 ? 1 : 0), Adapt2(J.n, mpirank == 0 ? 1 : 0); // Initialize Mat objects for bordered matrix
      Mat Adapt3(J.n + (mpirank == 0 ? 1 : 0), mpirank == 0 ? 1 : 0), Adapt4(J.n + (mpirank == 0 ? 1 : 0), mpirank == 0 ? 1 : 0); // Initialize Mat objects for bordered matrix
      H = Adapt0;
      JlPM = Adapt1;
      gqPM = Adapt2;
      JlPMa = Adapt3;
      yqPMa = Adapt4;
      Ja = [[J, JlPM], [gqPM', glPM]]; // make dummy Jacobian
      Jaa = [[Ja, JlPMa], [yqPMa', -1.0]]; // make dummy Jacobian
      set(Jaa, sparams = "-ksp_type preonly -pc_type fieldsplit -pc_fieldsplit_type schur -pc_fieldsplit_schur_precondition self", setup = 1);
      set(Ja, sparams = "-prefix_push fieldsplit_0_ -ksp_type preonly -pc_type fieldsplit -pc_fieldsplit_type schur -pc_fieldsplit_schur_precondition self -prefix_pop", prefix = "fieldsplit_0_", parent = Jaa, setup = 1);
      set(J, sparams = "-prefix_push fieldsplit_0_fieldsplit_0_ -ksp_type " + ksptype + " -pc_type " + pctype + " " + KSPparams + " -prefix_pop", prefix = "fieldsplit_0_fieldsplit_0_", parent = Ja);
      qa.resize(J.n);
      ChangeNumbering(J, ub[], qa);
      if(mpirank == 0) {
        qa.resize(qa.n+2);
        qa(qa.n-2) = lambda1;
        qa(qa.n-1) = lambda2;
      }
      qm.resize(J.n);
      ChangeNumbering(J, um[], qm);
      qma.resize(J.n);
      ChangeNumbering(J, uma[], qma);
      pP.resize(J.n);
      pP = qma;
      qP.resize(J.n);
      qP = qm;
      yqP.resize(J.n);
      ChangeNumbering(J, yb[], yqP);
      yqP0.resize(J.n);
      yqP0 = yqP;
      qa0.resize(qa.n);
      qap.resize(qa.n);
      it = 0;
      internalit = 0;
      adaptflag = 1;
      SNESSolve(Jaa, funcJa, funcRa, qa, reason = ret,
                sparams = " -snes_rtol " + snesrtol
                        + " -snes_linesearch_type " + sneslinesearchtype
                        + " -snes_converged_reason "
                        ); // solve nonlinear problem with SNES
      assert(ret > 0);
      if(mpirank==0) { // Save adapted mesh
        cout << "  Saving adapted mesh '" + meshout + "' in '" + workdir + "'." << endl;
        savemesh(Thg, workdir + meshout);
      }
    }
    ChangeNumbering(J, ub[], qa(0:qa.n - (mpirank == 0 ? 3 : 1)), inverse = true);
    if(mpirank == 0) {
      lambda1 = qa(qa.n-2);
      lambda2 = qa(qa.n-1);
    }
    broadcast(processor(0), lambda1);
    broadcast(processor(0), lambda2);
    updatelambda(param1, lambda1);
    updatelambda(param2, lambda2);
    ChangeNumbering(J, um[], qm, inverse = true);
    ChangeNumbering(J, uma[], qma, inverse = true);
    um[] /= sqrt(J(um[], um[]));
    uma[] /= sqrt(J(uma[], uma[]));
    savefold(fileout + "_" + count, fileout, meshout, (count % savecount == 0), true);
    yqP0 = yqP;
    qP = qm;
    pP = qma;
    yl10 = yl1;
  }
  else {
    if (mpirank == 0){
      if(res*(monotone!=0) >= resp) cout << "\tResidual norm failed to decrease. Reattempting with smaller step." << endl;
      if(kappa >= kappamax) cout << "\tContraction rate exceeds " << kappamax << ". Reattempting with smaller step." << endl;
      if(it >= snesmaxit) cout << "\tFailed to converge within limit of " + snesmaxit + " iterations. Reattempting with smaller step." << endl;
      if(maxdelta >= deltamax) cout << "\tStep size exceeds " << deltamax << "." << endl;
      if(acos(abs(alpha)) >= alphamax) cout << "\tAngle exceeds " << (alphamax*180./pi) << " degrees." << endl;
    }
    h0 /= fmax;
    qa = qa0;
  }
}
