//
// tdnscompute.edp
// Chris Douglas
// chris.douglas@ladhyx.polytechnique.fr
//
// EXAMPLE USAGE:
//  Compute time-domain nonlinear simulation with IC from input file without mesh adaptation:
// mpirun -n 4 FreeFem++-mpi -v 0 tdnscompute.edp -fi <FILEIN> -fo <FILEOUT>
//
//  Compute time-domain nonlinear simulation with IC from input file with mesh adaptation:
// mpirun -n 4 FreeFem++-mpi -v 0 tdnscompute.edp -fi <FILEIN> -fo <FILEOUT> -mo <MESHOUT>
//
// NOTE: This file should not be changed unless you know what you're doing.
//
load "iovtk"
load "PETSc"
include "settings.idp"
include "macros_bifbox.idp"
// arguments
string meshin = getARGV("-mi", ""); // input meshfile with extension
string meshout = getARGV("-mo", "");
string filein = getARGV("-fi", "");
string fileout = getARGV("-fo", filein);
int count = getARGV("-count", 0);
int savecount = getARGV("-scount", 1);
int maxcount = getARGV("-maxcount", 100);
string ksptype = getARGV("-ksp_type", "preonly");
string pctype = getARGV("-pc_type", "lu");
real dt = getARGV("-dt", 0.01);
string sneslinesearchtype = getARGV("-snes_linesearch_type", "basic"); // set -snes_linesearch_type

// Load mesh, make FE basis
string fileroot, meshroot;
string fileext = parsefilename(filein, fileroot); //extract file name and extension
parsefilename(fileout, fileout); // trim extension from output file, if given
if(fileext == "mode" || fileext == "rslv"){
  filein = readbasename(workdir + filein);
  fileext = parsefilename(filein, fileroot);
}
if(meshin == "") meshin = readmeshname(workdir + filein); // get mesh file
string meshext = parsefilename(meshin, meshroot);
parsefilename(meshout, meshroot); // trim extension from output mesh, if given
if (count > 0) fileroot = fileroot(0:filein.rfind("_" + count)-1); // get file root

bool adapt = false;
if(meshout == "") meshout = meshin; // if no adaptation
else adapt = true;  // if output meshfile is given, adapt mesh
Th = readmeshN(workdir + meshin);
Thg = Th;
buildDmesh(Th);
restu = restrict(XMh, XMhg, n2o);
XMh defu(ub), defu(um), defu(um2), defu(um3);
real time = 0.0;
if (count == 0){
  if(fileext == "base") {
    ub[] = loadbase(fileroot, meshin);
  }
  else if(fileext == "fold") {
    real[string] alpha;
    real beta;
    real[int] qm, qma;
    ub[] = loadfold(fileroot, meshin, qm, qma, alpha, beta);
  }
  else if(fileext == "hopf") {
    int sym;
    real omega;
    complex[string] alpha;
    complex beta;
    complex[int] qm, qma;
    ub[] = loadhopf(fileroot, meshin, qm, qma, sym, omega, alpha, beta);
  }
  else if(fileext == "foho") {
    int sym;
    real omega;
    complex[string] alpha1, alpha2;
    complex beta1, beta2, gamma1, gamma2;
    complex[int] q1m, q1ma, q2m, q2ma;
    ub[] = loadfoho(fileroot, meshin, q1m, q1ma, q2m, q2ma, sym, omega, alpha1, alpha2, beta1, beta2, gamma1, gamma2);
  }
  else if(fileext == "hoho") {
    int sym1, sym2;
    real omega1, omega2;
    complex[string] alpha1, alpha2;
    complex beta1, beta2, gamma1, gamma2;
    complex[int] q1m, q1ma, q2m, q2ma;
    ub[] = loadhoho(fileroot, meshin, q1m, q1ma, q2m, q2ma, sym1, sym2, omega1, omega2, alpha1, alpha2, beta1, beta2, gamma1, gamma2);
  }
  else if(fileext == "tdns") {
    real time;
    ub[] = loadtdns(fileroot, meshin, time);
  }
  savetdns(filein, (savecount > 0 ? fileout : ""), meshin, filein, time, false, false);
}
else {
  ub[] = loadtdns(fileroot + "_" + count, meshin, time);
}
// Create distributed Mat
Mat J;
createMatu(Th, J, Pk);
Mat M(J);
int sym = 0;
real ik = 0.0, ik2 = 0.0, ik3 = 0.0, iomega = 1.0/dt, iomega2 = 0.0, iomega3 = 0.0;
include "eqns.idp" // load equations
set(J, sparams = " -ksp_type " + ksptype + " -pc_type " + pctype + " " + KSPparams);
real[int] q;
ChangeNumbering(J, ub[], q);
real[int] qp = q;
// Function to build residual "F(t,u,\dot{u})" operator in PETSc numbering
func real[int] funcF(real[int]& in) {
    ChangeNumbering(J, ub[], in, inverse = true, exchange = true);
    ChangeNumbering(J, um[], qp, inverse = true, exchange = true);
    um[] -= ub[]; // -dq
    um[] /= -dt; // -dq/-dt = dq/dt
    real[int] out, F = vR(0, XMh, tgv = -1);
    F += vM(0, XMh, tgv = -10);
    ChangeNumbering(J, F, out);
    return out;
}
// Function to build Jacobian operator in PETSc numbering
func int funcJ(real[int]& in) {
    ChangeNumbering(J, ub[], in, inverse = true, exchange = true);
    iomega = 1.0/dt;
    J = vJ(XMh, XMh, tgv = -1);
    return 0;
}

while (count < maxcount){
  int ret;
  // solve nonlinear problem with TS
  SNESSolve(J, funcJ, funcF, q, reason = ret,
            sparams = " -snes_linesearch_type " + sneslinesearchtype
                    + " -snes_converged_reason "
                    ); // solve nonlinear problem with SNES
  if(ret > 0) { // Save solution if solver converged and output file is given
    count++;
    time += dt;
    if(adapt && (count % savecount == 0)) { // if output meshfile is given, adapt mesh
      ChangeNumbering(J, ub[], q, inverse = true);
      ChangeNumbering(J, um[], qp, inverse = true);
      meshout = meshroot + "_" + count + "." + meshext;
      XMhg defu(uG), defu(umG), defu(tempu); // create private global FE functions
      for[i, v : restu] tempu[][v] = ub[][i]; // populate local portion of global soln
      mpiAllReduce(tempu[], uG[], mpiCommWorld, mpiSUM); //aggregate local solns into global soln
      for[i, v : restu] tempu[][v] = um[][i]; // populate local portion of global soln
      mpiAllReduce(tempu[], umG[], mpiCommWorld, mpiSUM); //aggregate local solns into global soln
      if(mpirank == 0)  // Perform mesh adaptation (serially) on processor 0
        Thg = adaptmesh(Thg, adaptu(uG), adaptmeshoptions);
        broadcast(processor(0), Thg); // broadcast global mesh to all processors
      defu(uG) = defu(uG); //interpolate global solution from old mesh to new mesh
      defu(umG) = defu(umG); //interpolate global solution from old mesh to new mesh
      Th = Thg; //Reinitialize local mesh with global mesh
      Mat Adapt;
      createMatu(Th, Adapt, Pk); // Partition new mesh and update the PETSc numbering
      J = Adapt;
      set(J, sparams = " -ksp_type " + ksptype + " -pc_type " + pctype + " " + KSPparams);
      defu(ub) = initu(0.0); // set local values to zero
      defu(um) = initu(0.0); // set local values to zero
      restu.resize(ub[].n); // Change size of restriction operator
      restu = restrict(XMh, XMhg, n2o); // Compute new restriction from global mesh to local mesh
      ub[] = uG[](restu); //restrict global solution to each local mesh
      um[] = umG[](restu); //restrict global solution to each local mesh
      Mat Adapt0(J);
      M = Adapt0;
      q.resize(J.n);  // Resize state vector
      qp.resize(J.n);  // Resize state vector
      ChangeNumbering(J, ub[], q);
      ChangeNumbering(J, um[], qp);
      SNESSolve(J, funcJ, funcF, q, reason = ret,
                sparams = " -snes_linesearch_type " + sneslinesearchtype
                        + " -snes_converged_reason "
                        ); // solve nonlinear problem with SNES
      assert(ret > 0);
      if(mpirank == 0) { // Save adapted mesh
        cout << "  Saving adapted mesh '" + meshout + "' in '" + workdir + "'." << endl;
        savemesh(Thg, workdir + meshout);
      }
    }
    ChangeNumbering(J, ub[], q, inverse = true);
    savetdns(fileout + "_" + count, (savecount > 0 ? fileout : ""), meshout, filein, time, (count % savecount == 0), true);
    qp = q;
  }
  else {
    if(mpirank == 0) cout << "\tConvergence failed. Reattempting with halved time step." << endl;
    q = qp;
    dt /= 2.0;
  }
}
