//
// tdnscompute.edp
// Chris Douglas
// chris.douglas@ladhyx.polytechnique.fr
//
// EXAMPLE USAGE:
//  Compute time-domain nonlinear simulation with IC from input file without mesh adaptation:
// mpirun -n 4 FreeFem++-mpi -v 0 tdnscompute.edp -fi <FILEIN> -fo <FILEOUT>
//
//  TODO: Compute time-domain nonlinear simulation with IC from input file with mesh adaptation:
// mpirun -n 4 FreeFem++-mpi -v 0 tdnscompute.edp -fi <FILEIN> -fo <FILEOUT> -mo <MESHOUT>
//
// NOTE: This file should not be changed unless you know what you're doing.
//
load "iovtk"
load "PETSc"
include "settings.idp"
include "macros_bifbox.idp"
// arguments
string meshin = getARGV("-mi", ""); // input meshfile with extension
string meshout = getARGV("-mo", "");
string filein = getARGV("-fi", "");
string fileout = getARGV("-fo", filein);
int count = getARGV("-count", 0);
int savecount = getARGV("-scount", 1);
int maxcount = getARGV("-maxcount", 100);
real h0 = getARGV("-h0", 1.0);
string adaptto = getARGV("-adaptto","b");
string tstype = getARGV("-ts_type", "beuler");
string ksptype = getARGV("-ksp_type", "preonly");
string pctype = getARGV("-pc_type", "lu");
int tsmaxsnesfailures = getARGV("-ts_max_snes_failures", -1);
real tsdt = getARGV("-ts_dt", 1.0e-3);
real tsmaxtime = getARGV("-ts_max_time", 1.0);
string tsadapttype = getARGV("-ts_adapt_type", "none");
string tsexactfinaltime = getARGV("-ts_exact_final_time", "stepover");
string sneslinesearchtype = getARGV("-snes_linesearch_type","basic"); // set -snes_linesearch_type

// Load mesh, make FE basis
string fileroot, meshroot;
string fileext = parsefilename(filein, fileroot); //extract file name and extension
parsefilename(fileout, fileout); // trim extension from output file, if given
if(fileext == "mode" || fileext == "rslv"){
  filein = readbasename(workdir + filein);
  fileext = parsefilename(filein, fileroot);
}
if (count > 0) fileroot = fileroot(0:filein.rfind("_" + count)-1); // get file root
if(meshin == "") meshin = readmeshname(workdir + filein); // get mesh file
string meshext = parsefilename(meshin, meshroot);
parsefilename(meshout, meshroot); // trim extension from output mesh, if given

bool adapt = false;
if(meshout == "") meshout = meshin; // if no adaptation
else adapt = true;  // if output meshfile is given, adapt mesh
Th = readmeshN(workdir + meshin);
Thg = Th;
buildDmesh(Th);
restu = restrict(XMh, XMhg, n2o);
XMh defu(ub), defu(um), defu(yb);
real time = 0.0;
if (count == 0){
  if(fileext == "base") {
    ub[] = loadbase(fileroot, meshin);
  } else if(fileext == "fold") {
    real[int] qm, qma;
    ub[] = loadfold(fileroot, meshin, qm, qma);
  } else if(fileext == "hopf") {
    int m;
    real omega;
    complex[int] qm, qma;
    ub[] = loadhopf(fileroot, meshin, qm, qma, m, omega);
  }
  if(mpirank == 0 && savecount > 0) printstats(fileout, filein, meshin, 0, 0, 0);
} else {
  ub[] = loadtdns(fileroot + "_" + count, meshin, time);
}
cout << time << endl;
// Create distributed Mat
Mat J;
createMatu(Th, J, Pk);
Mat M(J);
int m = 0;
real ik = 0.0, iomega = 0.0;
include "eqns.idp" // load equations
set(J, sparams = " -ksp_type " + ksptype + " -pc_type " + pctype + " " + KSPparams);
real[int] q;
ChangeNumbering(J, ub[], q);
// MESH ADAPTATION
/*if(adapt) { // if output meshfile is given, adapt mesh
  adapt = true;
  meshout = meshout + "." + meshext;
  ChangeNumbering(J, ub[], q, inverse = true, exchange = false); // PETSc to FF numbering
  XMhg defu(uG), defu(tempu); // create private global FE functions
  for[i, v : restu] tempu[][v] = ub[][i]; // populate local portion of global soln
  mpiAllReduce(tempu[], uG[], mpiCommWorld, mpiSUM); //aggregate local solns into global soln
  if(mpirank == 0)  // Perform mesh adaptation (serially) on processor 0
    Thg = adaptmesh(Thg, adaptu(uG), adaptmeshoptions);
  broadcast(processor(0), Thg); // broadcast global mesh to all processors
  defu(uG) = defu(uG); //interpolate global solution from old mesh to new mesh
  Th = Thg; //Reinitialize local mesh with global mesh
  Mat Adapt;
  createMatu(Th, Adapt, Pk); // Partition new mesh and update the PETSc numbering
  J = Adapt;
  set(J, sparams = " -ksp_type " + ksptype + " -pc_type " + pctype + " " + KSPparams);
  defu(ub) = initu(0.0); // set local values to zero
  restu.resize(ub[].n); // Change size of restriction operator
  restu = restrict(XMh, XMhg, n2o); // Compute new restriction from global mesh to local mesh
  ub[] = uG[](restu); //restrict global solution to each local mesh
  q.resize(J.n);  // Resize state vector
  ChangeNumbering(J, ub[], q);
}*/
// Function to build residual "F(t,u,\dot{u})" operator in PETSc numbering
func real[int] funcF(real t, real[int]& in, real[int]& inT) {
    ChangeNumbering(J, ub[], in,  inverse = true, exchange = true);
    ChangeNumbering(J, um[], inT, inverse = true, exchange = true);
    real[int] out, F = vR(0, XMh, tgv = -1);
    F += vM(0, XMh, tgv = -10);
    ChangeNumbering(J, F, out);
    return out;
}
// Function to build Jacobian operator in PETSc numbering
func int funcJ(real t, real[int]& in, real[int]& inT, real a) {
    ChangeNumbering(J, ub[], in, inverse = true, exchange = true);
    iomega = a;
    matrix Jl = vJ(XMh, XMh, tgv = -1);
    J = Jl;
    return 0;
}

func int funcMon(int s, real t, real[int]& in) {
    ChangeNumbering(J, ub[], in, inverse = true);
    if(s > 0)
      savetdns(fileout + "_" + (s+count), (savecount > 0 ? fileout : ""), meshout, filein, t, ((s+count) % savecount == 0), true);
    return 0;
}


// solve nonlinear problem with SNES
TSSolve(J, funcJ, funcF, q, monitor = funcMon, sparams = " -ts_init_time " + time
                                                       + " -ts_type " + tstype
                                                       + " -ts_monitor "
                                                       + " -ts_max_snes_failures " + tsmaxsnesfailures
                                                       + " -ts_dt " + tsdt
                                                       + " -ts_max_time " + tsmaxtime
                                                       + " -ts_adapt_type " + tsadapttype
                                                       + " -ts_exact_final_time " + tsexactfinaltime
                                                       + " -snes_linesearch_type " + sneslinesearchtype
                                                       );
