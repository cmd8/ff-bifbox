// Define KSP parameters
string KSPparams = "";
string EPSparams = " -eps_pos_gen_non_hermitian ";
// RESIDUAL VECTOR
  varf vR(defu(dub), defu(v))
      = int2d(Th)(
          vY*ubR*(ugradf(ub, 0, ubY) + ubY*Daexp(ub)) + ubT^(params["a"])*diff(0, vY, 0, ubY)/(params["Le"]*params["Pe"])
        + vR*(ugradf(ub, 0, ubR) + ubR*divu(0, ub))
        + ubR*ugradu(v, ub, 0, ub) - 1.0/(params["ga"]*params["Ma"]^2)*divu(0, v)*(ubR*ubT - 1.0) + ubT^(params["a"])*visc(0, v, 0, ub)/params["Re"]
        + vT*(ubR*(ugradf(ub, 0, ubT) - params["ga"]*params["dT"]*ubY*Daexp(ub)) + (params["ga"] - 1.0)*ubR*ubT*divu(0, ub))
        - vT*params["ga"]*(params["ga"] - 1.0)*params["Ma"]^2./params["Re"]*ubT^(params["a"])*visc(0, ub, 0, ub)
        + params["ga"]/params["Pe"]*ubT^(params["a"])*diff(0, vT, 0, ubT)
      )
      - int1d(Th, BCopen) (
        ubT^(params["a"])*ndotvisc(v, 0, ub)/params["Re"]
      )
      + BoundaryConditions(0, dub, ub);

// JACOBIAN MATRIX
varf vJ(defu(dub), defu(v))
      = int2d(Th)(
          vY*(ubR*(ugradf(dub, 0, ubY) + ugradf(ub, ik, dubY)) + dubR*ugradf(ub, 0, ubY) + (ubR*dubY + dubR*ubY + ubR*ubY*dubT*params["Ze"]*(1.0 + params["dT"])^2./(params["dT"]*ubT^2.))*Daexp(ub)) + (ubT^(params["a"])*diff(-ik, vY, ik, dubY) + params["a"]*ubT^(params["a"]-1.)*dubT*diff(-ik, vY, 0, ubY))/(params["Le"]*params["Pe"])
        + vR*(ugradf(ub, ik, dubR) + ugradf(dub, 0, ubR) + dubR*divu(0, ub) + ubR*divu(ik, dub))
        + ubR*(ugradu(v, dub, 0, ub) + ugradu(v, ub, ik, dub)) + dubR*ugradu(v, ub, 0, ub) - 1.0/(params["ga"]*params["Ma"]^2)*divu(-ik, v)*(dubR*ubT + ubR*dubT) + (ubT^(params["a"])*visc(-ik, v , ik, dub ) + params["a"]*ubT^(params["a"]-1.)*dubT*visc(-ik, v , 0, ub ))/params["Re"]
        + vT*(ubR*(ugradf(dub, 0, ubT) + ugradf(ub, ik, dubT)) + dubR*ugradf(ub, 0, ubT) - params["ga"]*params["dT"]*(ubR*dubY + dubR*ubY + ubR*ubY*dubT*params["Ze"]*(1.0 + params["dT"])^2/(params["dT"]*ubT^2.))*Daexp(ub) + (params["ga"] - 1.0)*(dubR*ubT*divu(0, ub) + ubR*dubT*divu(0, ub) + ubR*ubT*divu(ik, dub)))
        + params["ga"]/params["Pe"]*(ubT^(params["a"])*diff(-ik, vT, ik, dubT) + params["a"]*ubT^(params["a"]-1.)*dubT*diff(-ik, vT, 0, ubT))
        - vT*params["ga"]*(params["ga"] - 1.0)*params["Ma"]^2./params["Re"]*(ubT^(params["a"])*(visc(-ik, dub, 0, ub) + visc(0, ub, ik, dub)) + params["a"]*ubT^(params["a"]-1.)*dubT*visc(0, ub, 0, ub))
      )
      - int1d(Th, BCopen) (
        (ubT^(params["a"])*ndotvisc(v, ik, dub) + params["a"]*ubT^(params["a"]-1.)*dubT*ndotvisc(v, 0, ub))/params["Re"]
      )
      + BoundaryConditions(m, dub, ub);

// MASS MATRIX
varf vM(defu(dub), defu(v))
      = int2d(Th)(
          fdotg(vR,dubR) + ubR*(fdotg(vY,dubY) + fdotg(vT,dubT) + udotv(dub, v))
      )
      + BoundaryConditions(m, dub, ub);
