// Define KSP parameters
string KSPparams = "";
string EPSparams = " -eps_pos_gen_non_hermitian ";
// RESIDUAL VECTOR
  varf vR(defu(um), defu(v))
      = int2d(Th)(
          vY*(ugradf(ub, 0, ubY)                    +              ubY*Daexp(ub))/ubT + ubT^(params["a"])*diff(0, vY, 0, ubY)/(params["Le"]*params["Pe"])
        + vT*(ugradf(ub, 0, ubT)                    - params["dT"]*ubY*Daexp(ub))/ubT + ubT^(params["a"])*diff(0, vT, 0, ubT)/params["Pe"]
        + ugradu(v, ub, 0, ub)/ubT - divu(0, v)*ubp                                   + ubT^(params["a"])*visc(0, v , 0, ub )/params["Re"]
        + vp*(                     - divu(0, ub)    + params["dT"]*ubY*Daexp(ub)/ubT) - ubT^(params["a"])*diff(0, vp, 0, ubT)/params["Pe"]
      )
      - int1d(Th, BCopen) (
          ubT^(params["a"])*ndotvisc(v, 0, ub)/params["Re"]
      )
      + int1d(Th, BCaxis, BCopen, BCwall, BCinflow, BCslip) (
          vp*ubT^(params["a"])*ndotgrads(ubT)/params["Pe"]
      )
      + BoundaryConditions(0, um, ub);

// JACOBIAN MATRIX
varf vJ(defu(um), defu(v))
      = int2d(Th)(
          vY*(ugradf(um, 0, ubY)   + ugradf(ub, ik, umY)   - ugradf(ub, 0, ubY)*umT/ubT                            +              (umY + ubY*umT/ubT*(params["Ze"]*(1.0 + params["dT"])^2/(params["dT"]*ubT) - 1.0))*Daexp(ub))/ubT + (ubT^(params["a"])*diff(-ik, vY, ik, umY) + params["a"]*ubT^(params["a"]-1.)*umT*diff(-ik, vY, 0, ubY))/(params["Le"]*params["Pe"])
        + vT*(ugradf(um, 0, ubT)   + ugradf(ub, ik, umT)   - ugradf(ub, 0, ubT)*umT/ubT                            - params["dT"]*(umY + ubY*umT/ubT*(params["Ze"]*(1.0 + params["dT"])^2/(params["dT"]*ubT) - 1.0))*Daexp(ub))/ubT + (ubT^(params["a"])*diff(-ik, vT, ik, umT) + params["a"]*ubT^(params["a"]-1.)*umT*diff(-ik, vT, 0, ubT))/params["Pe"]
        +    (ugradu(v, um, 0, ub) + ugradu(v, ub, ik, um) - ugradu(v, ub, 0, ub)*umT/ubT)/ubT - divu(-ik, v)*ump                                                                                                                    + (ubT^(params["a"])*visc(-ik, v , ik, um ) + params["a"]*ubT^(params["a"]-1.)*umT*visc(-ik, v , 0, ub ))/params["Re"]
        + vp*(                                                                                    - divu(ik, um)     + params["dT"]*(umY + ubY*umT/ubT*(params["Ze"]*(1.0 + params["dT"])^2/(params["dT"]*ubT) - 1.0))*Daexp(ub))/ubT - (ubT^(params["a"])*diff(-ik, vp, ik, umT) + params["a"]*ubT^(params["a"]-1.)*umT*diff(-ik, vp, 0, ubT))/params["Pe"]
      )
      - int1d(Th, BCopen) (
          (ubT^(params["a"])*ndotvisc(v, ik, um) + params["a"]*ubT^(params["a"] - 1.0)*umT*ndotvisc(v, 0, ub))/params["Re"]
      )
      + int1d(Th, BCaxis, BCopen, BCwall, BCinflow, BCslip) (
          vp*(ubT^(params["a"])*ndotgrads(umT) + params["a"]*ubT^(params["a"]-1.)*umT*ndotgrads(ubT))/params["Pe"]
      )
      + BoundaryConditions(m, um, ub);

// MASS MATRIX
varf vM(defu(um), defu(v))
      = int2d(Th)(
          (gdotf(vY, umY) + gdotf(vT, umT) + vdotu(v, um))/ubT
      )
      + BoundaryConditions(m, um, ub);
