//
// settings_douglas_etal_2022.idp
// Chris Douglas
// cdoug@mit.edu
//
// Set dimension macro for 'macro_ddm.idp' (2)
  macro dimension()2//EOM
// Load hpddm macros
  include "macro_ddm.idp"
  verbosity = getARGV("-v",0);
// Define parameter and monitor names
  string[int] paramnames = ["1/Re", "S", "d"]; // set parameter names
  string[int] monitornames = ["minux(x,0)", "S_n"]; // set monitor names
// Declare symmetries
  real[int] sym(1);
// Define state vector and FE space
  macro defu(u)[u, u#y, u#z, u#p, u#po]//EOM
  macro initu(i)[i, i, i, i, i]//EOM
  func Pk = [P2, P2, P2, P1, P1];
// Define forcing vector and FE space (for resolvent analysis)
  macro deff(f)[f, f#y, f#z]//EOM
  macro initf(i)[i, i, i]//EOM
  func Pkf = [P2, P2, P2];
// Define quantities for mesh adaptation and plotting in Paraview
  macro adaptu(u)[u, u#y, u#z], u#p//EOM
  macro adaptf(f)[f, f#y, f#z]//EOM
// Name and order for real Paraview outputs
  string ParaviewDataName = "velocity pressure";
  string ParaviewDataNamef = "momentum";
  int[int] ParaviewOrder = [1, 1];
  int[int] ParaviewOrderf = [1];
// Name and order for complex Paraview outputs
  string ParaviewDataNamec = "velocity_r pressure_r velocity_i pressure_i";
  string ParaviewDataNamefc = "momentum_r momentum_i";
  int[int] ParaviewOrderc = [ParaviewOrder, ParaviewOrder];
  int[int] ParaviewOrderfc = [ParaviewOrderf, ParaviewOrderf];
  // Initial conditions (if no file)
  macro InitialConditions()initu(0)//EOM
// Boundary labels
  int BCnull = 0;
  int BCaxis = 1;
  int BCopen = 2;
  int BCinflow = 3;
  int BCwall = 4;
  int BCpipe = 5;
// coordinate mapping macros ---------------------------------------------------
  macro Y() (
        (y < 0.5)*(params["d"]*y)
      + ((y >= 0.5) && (y <= 1.0))*(0.5*params["d"] + (1. - params["d"])*(y - 0.5))
      + (y > 1.0)*(y - 0.5)
      ) //EOM

  macro dydY() (
        (y < 0.5)*(1./params["d"])
      + ((y >= 0.5) && (y <= 1.0))*(1.0/(1. - params["d"]))
      + (y > 1.0)*(1.0)
      ) // EOM

  macro dY(a) ( dydY*dy(a) ) //EOM

  macro Jinv() (1./dydY) //EOM

  macro tmag() (sqrt((N.y)^2 + (N.x/dydY)^2)) //EOM

  macro coordinatetransform() x, Y // EOM
// Define solution monitors to extract:
  macro getmonitors(u){
    fespace Xh1(Thg, P2);
    Xh1 UX = u, UZ = u#z;
    varf Onaxis(UX, VX) = on(BCaxis, UX = 1);
    real[int] onaxis = Onaxis(0, Xh1, tgv = 1);
    int[int] indices(onaxis.sum);
    real[int] uonaxis(indices.n);
    for(int i=0, j=0; i<Xh1.ndof; ++i) if(onaxis[i]) {indices[j] = i; ++j;}
    for(int i=0; i<indices.n; ++i) uonaxis[i] = UX[][indices[i]];
    monitors["minux(x,0)"] = uonaxis.min;
    monitors["S_n"] = int1d(Thg, levelset=x)( Y^2*UX*UZ/dydY )/int1d(Thg, levelset=x)( Y*UX*UX/dydY );
  }// EOM
