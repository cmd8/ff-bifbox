//
// Vflame.edp
// Chris Douglas
// christopher.douglas@duke.edu
//
// This file can be used with FreeFEM to create a mesh for the annular V-flame configuration.
//

assert(mpisize == 1); // Must be run with 1 processor
include "settings.idp"
real n0 = 12500;
real n1 = 2500;
real n2 = 500;
real xmin = -0.03;
real xmax = 0.2;
real rmax = 0.05;
real D = 0.011;
real Dcb = 0.003;
real xcb = 0.002;

string meshout = getARGV("-mo", "Vflame.msh"); // mesh filename
if(meshout.rfind(".msh") < 0) meshout = meshout + ".msh"; // add extension if not provided

// Define borders
//              o------------------3--------------------o
//              |                                       |
//              |                                       |
//              4                                       |
//              |                                       2
//  o----5------o                                       |
//  6                                                   |
//  o-------7-----o                                     |
//                8                                     |
//              o o------------------1------------------o
border C01(t=0, 1){x=xcb + (xmax - xcb)*t; y=0; label=BCaxis;}
border C02(t=0, 1){x=xmax; y=rmax*t; label=BCopen;}
border C03(t=0, 1){x=(1.0 - t)*xmax; y=rmax; label=BClateral;}
border C04(t=0, 1){x=0; y=rmax - (rmax - D/2.0)*t; label=BCwall;}
border C05(t=0, 1){x=xmin*t; y=D/2.0; label=BCchannel;}
border C06(t=0, 1){x=xmin; y=D/2.0 - (D - Dcb)/2.0*t; label=BCinflow;}
border C07(t=0, 1){x=xmin + (xcb - xmin)*t; y=Dcb/2.0; label=BCchannel;}
border C08(t=0, 1){x=xcb; y=(1.0 - t)*Dcb/2.0; label=BCcenterbody;}
// Assemble mesh
mesh Thg = buildmesh(C01(n1*(xmax - xcb)) + C02(n2*rmax) + C03(n2*xmax) + C04(n1*(rmax-D/2.0)) + C05(n0*abs(xmin)) + C06(n1*(D - Dcb)/2.0) + C07(n0*(xcb - xmin)) + C08(n0*Dcb/2.0));

plot(Thg, wait=1);
int[int] meshlabels = labels(Thg);
cout << "\tMesh: " << Thg.nv << " vertices, " << Thg.nt << " elements, " << Thg.nbe << " boundary elements, " << meshlabels.n << " labeled boundaries." << endl;
cout << "  Saving mesh '" + meshout + "'." << endl;
savemesh(Thg, meshout);
