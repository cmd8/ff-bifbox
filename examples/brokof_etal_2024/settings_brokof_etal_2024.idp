//
// settings_brokof_etal_2024.idp
// Chris Douglas
// christopher.douglas@duke.edu
//
// Set dimension macro for 'macro_ddm.idp' (2)
  macro dimension()2//EOM
// Load hpddm macros
  include "macro_ddm.idp"
  verbosity = getARGV("-v", 0);
// Define parameter and monitor names
  string[int] paramnames = ["Re", "Pe", "dT", "Ze", "Da", "Ma", "gamma", "L", "Rin", "Rout"]; // set parameter names
  string[int] monitornames = ["Lf", "abs(FTF)", "arg(FTF)"]; // set monitor names
// Define state vector and FE space
  macro defu(u)[u, u#y, u#T, u#Y, u#p]//EOM
  macro initu(i)[i, i, i, i, i]//EOM
  func Pk = [P2, P2, P2, P2, P1];
// Declare symmetries
  real[int] sym(1);
// Define forcing vector and FE space (for resolvent analysis)
  macro deff(f)[f, f#y]//EOM
  macro initf(i)[i, i]//EOM
  func Pkf = [P2, P2];
// Define quantities for mesh adaptation and plotting in Paraview
  macro adaptu(u)[u, u#y], u#T, u#Y, u#p//EOM
  macro adaptf(f)[f, f#y]//EOM
// Name and order for real Paraview outputs
  string ParaviewDataName = "velocity temperature species pressure";
  string ParaviewDataNamef = "momentum";
  int[int] ParaviewOrder = [1, 1, 1, 1];
  int[int] ParaviewOrderf = [1];
// Name and order for complex Paraview outputs
  string ParaviewDataNamec = "velocity_r temperature_r species_r pressure_r velocity_i temperature_i species_i pressure_i";
  string ParaviewDataNamefc = "momentum_r momentum_i";
  int[int] ParaviewOrderc = [ParaviewOrder, ParaviewOrder];
  int[int] ParaviewOrderfc = [ParaviewOrderf, ParaviewOrderf];
  // Initial conditions (if no file)
  macro InitialConditions()[0, 0, 1, 1, 0]//EOM
// Boundary labels
  int BCnull = 0;
  int BCaxis = 1;
  int BCout = 2;
  int BCwall = 3;
  int BCin = 4;
  int BCsym = 5;
// coordinate mapping macros ---------------------------------------------------
// NOTE: This mapping function is only monotonic when L > 1/3!
  macro X() (
        (x >= 0.0)*x
        + (x > -1.0 && x < 0.0)*((1.0 - params["L"])*(2.0*x^3.0 + 3.0*x^2.0) + x)
        + (x <= -1.0)*(x + (1.0 - params["L"]))
      ) // EOM

  macro dXdx() (
        (x <= -1.0 || x >= 0.0)
        + (x > -1.0 && x < 0.0)*((1.0 - params["L"])*6.0*(x^2.0 + x) + 1.0)
      ) // EOM

  macro dX(a) ( dx(a)/dXdx ) //EOM

  macro Jinv() (dXdx) //EOM

  macro coordinatetransform(U) X, y // EOM
// Define solution monitors to extract:
  macro getmonitors(){
      /* density macros */
      NewMacro ubgrho() ((params["gamma"]*params["Ma"]^2.0*ubgp + 1.0)/ubgT) EndMacro
      NewMacro dubgrhodT() (-(params["gamma"]*params["Ma"]^2.0*ubgp + 1.0)/ubgT^2.0) EndMacro
      NewMacro dubgrhodp() (params["gamma"]*params["Ma"]^2.0/ubgT) EndMacro
      /* Arrhenius reaction rate macros */
      NewMacro ubgArr() ( params["Da"]*exp(params["Ze"]/params["dT"]*(1.0 + params["dT"] - (1.0 + params["dT"])^2./ubgT)) ) EndMacro
      NewMacro dubgArrdT() ( (params["Ze"]/params["dT"]*(1.0 + params["dT"])^2.0/ubgT^2.0)*ubgArr ) EndMacro
      fespace Xh1(Thg, P2);
      Xh1 wdot = ubgrho*ubgY*ubgArr, Xpoints = X;
      varf Onaxis(wdot, VX) = on(BCaxis, wdot = 1);
      real[int] onaxis = Onaxis(0, Xh1, tgv = 1);
      int[int] indices(onaxis.sum);
      for(int i=0, j=0; i<Xh1.ndof; ++i) if(onaxis[i]) {indices[j] = i; ++j;}
      real[int] wdotonaxis(indices.n);
      for(int i=0; i<indices.n; ++i) wdotonaxis[i] = wdot[][indices[i]];
      real xqmax = wdotonaxis.max;
      for(int i=0; i<indices.n; ++i) if(abs(wdotonaxis[i] - xqmax) < 1.e-12) {xqmax = Xpoints[][indices[i]]; break;}
      monitors["Lf"] = xqmax;
      if(umg[].l2 > 0){
        complex FTFnum = int1d(Thg, levelset=x+1.0)(ubg)*int2d(Thg)(Jinv*((dubgrhodp*umgp + dubgrhodT*umgT)*ubgY*ubgArr + ubgrho*(umgY*ubgArr + ubgY*dubgArrdT*umgT)));
        complex FTFden = int1d(Thg, levelset=x+1.0)(umg)*int2d(Thg)(Jinv*wdot);
        if(FTFden == 0.) FTFden = 1.0;
        monitors["abs(FTF)"] = abs(FTFnum/FTFden);
        monitors["arg(FTF)"] = arg(FTFnum/FTFden);
      }
   }
  // EOM
