//
// eqns_sipp_lebedev_2007.idp
// Chris Douglas
// chris.douglas@ladhyx.polytechnique.fr
//
// Define KSP parameters
  string KSPparams = "";
  string EPSparams = " -eps_pos_gen_non_hermitian ";
// term macros ------------------------------------------------------
  macro vdotu(v, u) ( v*u + v#y*u#y) // velocity inner product

  macro divu(ik, u) ( dx(u) + dy(u#y)) // velocity divergence

  macro ugradu(v, U, ik, u) (  v  *(U*dx(u  ) + U#y*dy(u  )) + v#y*(U*dx(u#y) + U#y*dy(u#y)) ) // velocity advection term

  macro visc(ij, v, ik, u)  (  dx(v  )*dx(u  ) + dy(v  )*dy(u  )
                             + dx(v#y)*dx(u#y) + dy(v#y)*dy(u#y) ) // viscous term
// Boundary conditions
  macro BoundaryConditions(sym, u, U)
    on(BCwall, u = U, u#y = U#y)
    + on(BCslip, u#y = U#y)
    + on(BCinflow, u = U - 1., u#y = U#y)
    + on((abs(int(sym)) % 2 == 0)*BCaxis, u#y = U#y)
    + on((abs(int(sym)) % 2 != 0)*BCaxis, u = U)
  // EOM
  macro HomBoundaryConditions(sym, u)
    on(BCinflow, BCwall, u = 0, u#y = 0)
    + on(BCslip, u#y = 0)
    + on((abs(int(sym)) % 2 == 0)*BCaxis, u#y = 0)
    + on((abs(int(sym)) % 2 != 0)*BCaxis, u = 0)
  // EOM
// RESIDUAL OPERATOR
  varf vR(defu(dum), defu(v))
    = int2d(Th)(
      ugradu(v, ub, 0, ub) - divu(0, v)*ubp + visc(0, v, 0, ub)*params["1/Re"]
      - vp*divu(0, ub)
    )
    + BoundaryConditions(0, dum, ub);

// JACOBIAN OPERATOR
  varf vJ(defu(dum), defu(v))
    = int2d(Th)(
      iomega*vdotu(v, dum)
      + ugradu(v, dum, 0, ub) + ugradu(v, ub, ik, dum) - divu(-ik, v)*dump + visc(-ik, v , ik, dum )*params["1/Re"]
      - vp*divu(ik, dum)
    )
    + int2d(Th)(
      iomega*vdotu(v, um)
      + ugradu(v, um, 0, ub) + ugradu(v, ub, ik, um) - divu(-ik, v)*ump + visc(-ik, v , ik, um )*params["1/Re"]
      - vp*divu(ik, um)
    )
    + HomBoundaryConditions(sym, dum);

// MASS OPERATOR
  varf vM(defu(dum), defu(v))
    = int2d(Th)(
        vdotu(v, dum)
    )
    + int2d(Th)(
        vdotu(v, um)
    )
    + HomBoundaryConditions(sym, dum);

// FORCING/RESPONSE WEIGHTING MATRICES (FOR RESOLVENT ANALYSIS)
  varf vMq(defu(dum), defu(v))
    = int2d(Th)( vdotu(v, dum) );

  varf vMf(deff(dum), deff(v))
    = int2d(Th)( vdotu(v, dum) );

  varf vP(deff(fm), defu(v))
    = int2d(Th)( vdotu(v, fm) );

// HESSIAN OPERATOR
  varf vH(defu(dum), defu(v))
    = int2d(Th)(
      ugradu(v, um, ik2, um2) + ugradu(v, um2, ik, um)
    )
    + int2d(Th)(
      ugradu(v, um, ik2, dum) + ugradu(v, dum, ik, um)
    )
    + HomBoundaryConditions(sym, dum);

// TRESSIAN OPERATOR
  varf vT(defu(dum), defu(v))
    = HomBoundaryConditions(sym, dum);
