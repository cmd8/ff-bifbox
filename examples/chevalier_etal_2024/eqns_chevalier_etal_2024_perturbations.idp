//
// eqns_chevalier_etal_2024_perturbations.idp
// Chris Douglas
// christopher.douglas@duke.edu
//
// Define KSP parameters
  string KSPparams = "-ksp_type preonly -pc_type lu";
// term macros ------------------------------------------------------
  macro vdotu(v, u) ( y*(v*u + v#y*u#y + v#z*u#z) ) //EOM

  macro div(ik, u) ( y*(dx(u) + dy(u#y)) + u#y + (ik)*u#z ) // velocity divergence

  macro ugradu(v, U, ik, u) (  v  *(y*(U*dx(u  ) + U#y*dy(u  )) + U#z* (ik)*u         )
                             + v#y*(y*(U*dx(u#y) + U#y*dy(u#y)) + U#z*((ik)*u#y - u#z))
                             + v#z*(y*(U*dx(u#z) + U#y*dy(u#z)) + U#z*((ik)*u#z + u#y)) ) // scaled convection term

  macro visc(ij, v, ik, u) ( 2.0*y*dx(v  )*dx(u  )              +     y*dy(v  )*(dx(u#y) + dy(u  ))          +      (ij)*v         *( dx(u#z) + (ik)/y*u)
                               + y*dx(v#y)*(dx(u#y) + dy(u  ))  + 2.0*y*dy(v#y)*dy(u#y)                      +     ((ij)*v#y - v#z)*(((ik)*u#y - u#z)/y + dy(u#z) )
                               +   dx(v#z)*((ik)*u + y*dx(u#z)) +       dy(v#z)*((ik)*u#y - u#z + y*dy(u#z)) + 2.0*((ij)*v#z + v#y)*((ik)*u#z + u#y)/y             ) // EOM
  // S-A macros from NASA: https://turbmodels.larc.nasa.gov/spalart.html#sanoft2
  real SAcv1 = 7.1;
  macro SAfv1(u) ( (u#v^3.0)/(u#v^3.0 + (SAcv1*params["1/Re"])^3.0) ) // EOM

// Boundary conditions
  macro Uinlet tanh(6.0*(1.0 - y^2.0)) //EOM
  macro Ucoflow 2.0*0.05*(y - 1.0001)/18.9999*(1.0 - 0.5*(y - 1.0001)/18.9999) //EOM

  macro BoundaryConditions(u, U)
    on(BCin2, u = U - Ucoflow, u#y = U#y, u#z = U#z)
    + on(BCin1, u = U - Uinlet, u#y = U#y, u#z = U#z - params["S"]*y*Uinlet)
    + on(BCwall, u = U, u#y = U#y, u#z = U#z)
    + on(BCaxis, u#y = U#y, u#z = U#z)
  // EOM
  macro HomBoundaryConditions(u)
    on(BCwall, BCin1, BCin2, u = 0, u#y = 0, u#z = 0)
    + on((abs(int(sym(0))) != 1)*BCaxis, u#y = 0, u#z = 0)
    + on((abs(int(sym(0))) >  0)*BCaxis, u = 0)
  // EOM
// RESIDUAL OPERATOR
  varf vR(defu(dum), defu(v))
    = int2d(Th)(
      ugradu(v, ub, 0, ub) - div(0, v)*ubp + (params["1/Re"] + max(ubv, 0.0)*SAfv1(ub))*visc(0, v, 0, ub)
      - vp*div(0, ub)
    )
    + BoundaryConditions(dum, ub);

// JACOBIAN OPERATOR
  varf vJ(defu(dum), defu(v))
    = int2d(Th)(
      iomega*( vdotu(v, um) )
      + vv*umv 
      + ugradu(v, um, 0, ub) + ugradu(v, ub, ik(0), um) - div(-ik(0), v)*ump + (params["1/Re"] + max(ubv, 0.0)*SAfv1(ub))*visc(-ik(0), v, ik(0), um)
      - vp*div(ik(0), um)
    )
    + int2d(Th)(
      iomega*( vdotu(v, dum) )
      + vv*dumv 
      + ugradu(v, dum, 0, ub) + ugradu(v, ub, ik(0), dum) - div(-ik(0), v)*dump + (params["1/Re"] + max(ubv, 0.0)*SAfv1(ub))*visc(-ik(0), v, ik(0), dum)
      - vp*div(ik(0), dum)
    )
    + HomBoundaryConditions(dum);

// MASS OPERATOR
  varf vM(defu(dum), defu(v))
    = int2d(Th)( vdotu(v, dum) )
    + int2d(Th)( vdotu(v, um) )
    + HomBoundaryConditions(dum);

// FORCING/RESPONSE OPERATORS
  varf vMq(defu(dum), defu(v))
    = int2d(Th)( vdotu(v, dum) );

  varf vMf(deff(fm), deff(v))
    = int2d(Th)( vdotu(v, fm) );

  varf vP(deff(fm), defu(v))
    = int2d(Th)( vdotu(v, fm) );

// HESSIAN OPERATOR
  varf vH(defu(dum), defu(v))
    = HomBoundaryConditions(dum);

// TRESSIAN OPERATOR
  varf vT(defu(dum), defu(v))
    = HomBoundaryConditions(dum);