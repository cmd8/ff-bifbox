//
// eqns_moulin_etal_2019.idp
// Chris Douglas
// chris.douglas@ladhyx.polytechnique.fr
//
// Define KSP parameters and preconditioner macros
  string KSPparams;
  string[int] Snames(4); // Array of fieldsplit names
  Snames[0] = "vX";
  Snames[1] = "vY";
  Snames[2] = "vZ";
  Snames[3] = "p";
  XMh defu(Sfields), defu(Slist);
  bool shiftPrecon = getARGV("-shiftPrecon", 0);
  matrix<PetscScalar>[int] Sprec(1+shiftPrecon); // Dummy Schur preconditioner matrix
  fespace Qh(Th, P1);
  PetscScalar pcshift;

  varf vMp(p, q) = int3d(Th, qforder = 3)
    (-1.0/(params["gamma"] + params["1/Re"]) * p * q); // Mass matrix
  varf vLp(p, q) = int3d(Th, qforder = 2)
    (-1.0/(pcshift) * (dx(p) * dx(q) + dy(p) * dy(q) + dz(p) * dz(q)))
    + on(BCoutflow, p = 1); // weak Laplacian matrix

  string paramsV = "-ksp_type gmres -ksp_pc_side right -ksp_rtol 1.0e-1 -ksp_gmres_restart 50 -pc_type asm -pc_asm_overlap 1 -sub_pc_type lu -sub_pc_factor_mat_solver_type mumps";
  if(!shiftPrecon) {
    KSPparams = "-prefix_push fieldsplit_vX_ " + paramsV + " -prefix_pop "
              + "-prefix_push fieldsplit_vY_ " + paramsV + " -prefix_pop "
              + "-prefix_push fieldsplit_vZ_ " + paramsV + " -prefix_pop "
              + "-prefix_push fieldsplit_p_ -ksp_type cg -ksp_max_it 5 -pc_type jacobi -prefix_pop "
              + "-ksp_type fgmres -ksp_rtol 1.0e-1 -ksp_gmres_restart 200 -pc_type fieldsplit -pc_fieldsplit_type multiplicative";
  } else {
    int recycle = getARGV("-recycle", 0); // use fGMRES by default
    KSPparams = "-prefix_push fieldsplit_vX_ " + paramsV + " -prefix_pop "
              + "-prefix_push fieldsplit_vY_ " + paramsV + " -prefix_pop "
              + "-prefix_push fieldsplit_vZ_ " + paramsV + " -prefix_pop "
              + "-prefix_push fieldsplit_p_ -ksp_type preonly -pc_type composite -prefix_push sub_0_ -pc_type bjacobi -sub_pc_type icc -prefix_pop -prefix_push sub_1_ -pc_type gamg -pc_gamg_square_graph 10 -prefix_pop -prefix_pop "
              + (recycle == 0 ? "-ksp_type fgmres" : "-ksp_type hpddm -ksp_hpddm_type gcrodr -ksp_hpddm_recycle " + recycle + " -ksp_hpddm_variant flexible")
              + " -ksp_rtol 1.0e-4 -ksp_gmres_restart 200 -ksp_max_it 1000 -ksp_converged_maxits -pc_type fieldsplit -pc_fieldsplit_type multiplicative";
  }  

  macro Jprecon(shift)
    defu(Sfields) = [1, 2, 3, 4]; /* numbering of each field */
    {
      Qh pIdx = 0; /* function from the pressure space */
      pIdx[] = 1:pIdx[].n; /* numbering of the unknowns of Qh */
      defu(Slist) = [0, 0, 0, pIdx]; /* renumbering to the complete space by interpolation on Wh */
    }
    Sprec[0] = vMp(Qh, Qh); /* matrix assembly */
    if(shiftPrecon) {
      pcshift = shift;
      Sprec[1] = vLp(Qh, Qh); /* matrix assembly */
    }
  // EOM

  macro Jsetargs()
    names = Snames, fields = Sfields[], schurPreconditioner = Sprec, schurList = Slist[]
  // EOM
// term macros ------------------------------------------------------
  macro vdotu(v, u) ( v*u + v#y*u#y + v#z*u#z ) //EOM

  macro div(u) ( dx(u) + dy(u#y) + dz(u#z) ) // velocity divergence

  macro ugradu(v, U, u) (  v  *(U*dx(u  ) + U#y*dy(u  ) + U#z*dz(u  ))
                         + v#y*(U*dx(u#y) + U#y*dy(u#y) + U#z*dz(u#y))
                         + v#z*(U*dx(u#z) + U#y*dy(u#z) + U#z*dz(u#z)) ) // scaled convection term

  macro visc(v, u) (  dx(v  )*dx(u  ) + dy(v  )*dy(u  ) + dz(v  )*dz(u  )
                    + dx(v#y)*dx(u#y) + dy(v#y)*dy(u#y) + dz(v#y)*dz(u#y)
                    + dx(v#z)*dx(u#z) + dy(v#z)*dy(u#z) + dz(v#z)*dz(u#z) ) // EOM
// Boundary conditions
  macro BoundaryConditions(u, U)
    on(BCinflow, u = U - 1.0, u#y = U#y, u#z = U#z)
    + on(BCwall, u = U, u#y = U#y, u#z = U#z)
    + on(BClateral, u = U - 1.0)
  // EOM
  macro HomBoundaryConditions(sym, u)
    on(BCinflow, BCwall, u = 0, u#y = 0, u#z = 0)
    + on(BClateral, u = 0)
  // EOM
// RESIDUAL OPERATOR
  varf vR(defu(dum), defu(v))
    = int3d(Th)(
      ugradu(v, ub, ub)
    )
    + int3d(Th, qforder = 3)(
      div(v)*(params["gamma"]*div(ub) - ubp) + visc(v, ub)*params["1/Re"]
      - vp*div(ub)
    )
    + BoundaryConditions(dum, ub);

// JACOBIAN OPERATOR
  varf vJ(defu(dum), defu(v))
    = int3d(Th)(
      ugradu(v, dum, ub) + ugradu(v, ub, dum)
    )
    + int3d(Th, qforder = 3)(
      iomega*vdotu(v, dum)
      + div(v)*(params["gamma"]*div(dum) - dump) + visc(v, dum)*params["1/Re"]
      - vp*div(dum)
    )
    + int3d(Th)(
      ugradu(v, um, ub) + ugradu(v, ub, um)
    )
    + int3d(Th, qforder = 3)(
      iomega*vdotu(v, um)
      + div(v)*(params["gamma"]*div(um) - ump) + visc(v, um)*params["1/Re"]
      - vp*div(um)
    )
    + HomBoundaryConditions(sym, dum);

// MASS OPERATOR
  varf vM(defu(dum), defu(v))
    = int3d(Th)( vdotu(v, dum) )
    + int3d(Th)( vdotu(v, um) )
    + HomBoundaryConditions(sym, dum);

// FORCING/RESPONSE WEIGHTING MATRICES (FOR RESOLVENT ANALYSIS)
  varf vMq(defu(dum), defu(v))
    = int3d(Th)( vdotu(v, dum) );

  varf vMf(deff(fm), deff(v))
    = int3d(Th)( vdotu(v, fm) );

  varf vP(deff(fm), defu(v))
    = int3d(Th)( vdotu(v, fm) );

// HESSIAN OPERATOR
  varf vH(defu(dum), defu(v))
    = int3d(Th)(
      ugradu(v, um, um2) + ugradu(v, um2, um)
    )
    + int3d(Th)(
      ugradu(v, um, dum) + ugradu(v, dum, um)
    )
    + HomBoundaryConditions(sym, dum);

// TRESSIAN OPERATOR
  varf vT(defu(dum), defu(v))
    = HomBoundaryConditions(sym, dum);
