//
// cylinder.edp
// Chris Douglas
// chris.douglas@ladhyx.polytechnique.fr
//
// This file can be used with FreeFEM to create a mesh for the cylinder.
//

assert(mpisize == 1); // Must be run with 1 processor
include "settings.idp"
real n0 = getARGV("-n0", 50);;
real n1 = getARGV("-n1", 10);
real xcyl = getARGV("-xcyl", 5.0);
real Lduct = getARGV("-Lduct", 20.0);
real Dcyl = getARGV("-Dcyl", 0.2);

string meshout = getARGV("-mo", "cylinder.msh"); // mesh filename
if(meshout.rfind(".msh") < 0) meshout = meshout + ".msh"; // add extension if not provided

// Define borders
//  o------------------6-------------------o
//  |                                      |
//  1                                      5
//  |           ╭--3--╮                    |
//  o-----2-----o  0  o---------4----------o
border C01(t=0, 1){x=-xcyl; y=0.5*(1-t); label=BCinflow;}
border C02(t=0, 1){x=-xcyl+(xcyl-0.5*Dcyl)*t; y=0; label=BCaxis;}
border C03(t=0, 1){x=-0.5*Dcyl*cos(pi*t); y=0.5*Dcyl*sin(pi*t); label=BCcyl;}
border C04(t=0, 1){x=0.5*Dcyl+(Lduct-xcyl-0.5*Dcyl)*t; y=0; label=BCaxis;}
border C05(t=0, 1){x=Lduct-xcyl; y=0.5*t; label=BCopen;}
border C06(t=0, 1){x=Lduct-xcyl-Lduct*t; y=0.5; label=BCwall;}
// Assemble mesh
mesh Thg = buildmesh(C01(n1*0.5) + C02(n1*(xcyl-0.5*Dcyl)) + C03(n0*0.5*pi*Dcyl) + C04(n1*(Lduct-xcyl-0.5*Dcyl)) + C05(n1*0.5) + C06(n1*Lduct));

int[int] meshlabels = labels(Thg);
cout << "\tMesh: " << Thg.nv << " vertices, " << Thg.nt << " triangles, " << Thg.nbe << " boundary elements, " << meshlabels.n << " labeled boundaries." << endl;
cout << "  Saving mesh '" + meshout + "'." << endl;
savemesh(Thg, meshout);
