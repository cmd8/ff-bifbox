//
// settings_jan_lutz_flame_project.idp
// Chris Douglas
// chris.douglas@ladhyx.polytechnique.fr
//
// Set dimension macro for 'macro_ddm.idp' (2)
  macro dimension()2//EOM NOTE: only 2 for now
// Load hpddm macros
  include "macro_ddm.idp"
  verbosity = getARGV("-v",0);
// Define parameter and monitor names
  string[int] paramnames = ["Re", "Pr", "Ma", "ga"]; // set parameter names
  string[int] monitornames = ["uxmin", "Fx", "Fy", "Recyl"]; // set monitor names
// Define state vector and FE space
  macro defu(u)[u, u#y, u#T, u#R]//EOM
  macro initu(i)[i, i, i, i]//EOM
  func Pk = [P2, P2, P2, P1];
// Define forcing vector and FE space (for resolvent analysis)
  macro deff(f)[f, f#y]//EOM
  macro initf(i)[i, i]//EOM
  func Pkf = [P2, P2];
// Define quantities for mesh adaptation and plotting in Paraview
  macro adaptu(u)[u, u#y], u#T, u#R//EOM
  macro adaptf(f)[f, f#y]//EOM
// Name and order for real Paraview outputs
  string ParaviewDataName = "velocity temperature density";
  string ParaviewDataNamef = "momentum";
  int[int] ParaviewOrder = [1, 1, 1];
  int[int] ParaviewOrderf = [1];
// Name and order for complex Paraview outputs
  string ParaviewDataNamec = "velocity_r temperature_r density_r velocity_i temperature_i density_i";
  string ParaviewDataNamefc = "momentum_r momentum_i";
  int[int] ParaviewOrderc = [ParaviewOrder, ParaviewOrder];
  int[int] ParaviewOrderfc = [ParaviewOrderf, ParaviewOrderf];
  // Initial conditions (if no file)
  macro InitialConditions()[0, 0, 1, 1]//EOM
// Boundary labels
  int BCnull = 0;
  int BCaxis = 1;
  int BCopen = 2;
  int BCwall = 3;
  int BCinflow = 4;
  int BCcyl = 5;
// Define solution monitors to extract: here x and y forces on BCcyl
  macro getmonitors(u){
      fespace Xh1(Thg, P2);
      Xh1 UX = u;
      monitors["uxmin"] = UX[].min;
      monitors["Fx"] = int1d(Thg, BCcyl)(1.0/(params["ga"]*params["Ma"]^2)*(u#R*u#T - 1.0)*N.x - 1.0/params["Re"]*(2.0*(dx(u  ) - 1./3.*(dx(u) + dy(u#y)))*N.x + (dx(u#y) + dy(u))*N.y));
      monitors["Fy"] = int1d(Thg, BCcyl)(1.0/(params["ga"]*params["Ma"]^2)*(u#R*u#T - 1.0)*N.y - 1.0/params["Re"]*(2.0*(dy(u#y) - 1./3.*(dx(u) + dy(u#y)))*N.y + (dx(u#y) + dy(u))*N.x));
      monitors["Recyl"] = int1d(Thg, BCcyl)(u#R)/int1d(Thg, BCcyl)(1.0)*0.2*params["Re"]; /* avg density on cyl * cyl diameter * Re */
  }
  // EOM
