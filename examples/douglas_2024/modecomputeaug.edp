//
// modecomputeaug.edp
// Chris Douglas
// christopher.douglas@duke.edu
//
// EXAMPLE USAGE:
//  Solve eigenvalue problem, store eigenvalue spectrum without storing eigenvectors:
// ff-mpirun -np 4 modecomputeaug.edp -eps_target 0.1+1.0i -eps_nev 10 -fi <FILEIN> -so <VALFILE>
//
//  Solve eigenvalue problem, store eigenvalue spectrum and eigenvectors:
// ff-mpirun -np 4 modecomputeaug.edp -eps_target 0.1+1.0i -eps_nev 4 -fi <FILEIN> -fo <VECFILE> -so <VALFILE>
//
//  Solve eigenvalue problem, store eigenvectors without storing eigenvalue spectrum:
// ff-mpirun -np 4 modecomputeaug.edp -eps_target 0.1+1.0i -eps_nev 4 -fi <FILEIN> -fo <VECFILE>
//
//  Solve eigenvalue problems over a sequence of shifts, store eigenvalue spectra and eigenvectors:
// ff-mpirun -np 4 modecomputeaug.edp -eps_target 0.1+0.2i -ntarget 10 -targetf 0.1+2.0i -eps_nev 4 -fi <FILEIN> -fo <VECFILE> -so <VALFILE>
//
// NOTE: This file should not be changed unless you know what you're doing.
//
load "iovtk"
load "PETSc-complex"
include "settings.idp"
include "macros_bifbox.idp"
// arguments
string meshin = getARGV("-mi", ""); // input meshfile
string filein = getARGV("-fi", "");
string fileout = getARGV("-fo", "");
string statout = getARGV("-so", "");
bool epstwosided = getARGV("-eps_two_sided", 0);
string symstr = getARGV("-sym", "0");
string epstarget = getARGV("-eps_target", "0+0i");
int ntarget = getARGV("-ntarget", 1);
string targetf = getARGV("-targetf", epstarget);
int epsnev = getARGV("-eps_nev", 1);
bool strictnev = getARGV("-strict", 0);

// Load mesh, make FE basis
string fileroot, fileext = parsefilename(filein, fileroot); //extract file name and extension
parsefilename(statout, statout); // trim extension from output file, if given
parsefilename(fileout, fileout); // trim extension from output file, if given
if(fileext == "mode" || fileext == "resp" || fileext == "rslv" || fileext == "tdls" || fileext == "floq") {
  filein = readbasename(workdir + filein);
  fileext = parsefilename(filein, fileroot);
}
if(filein != "" && meshin == "") meshin = readmeshname(workdir + filein); // get mesh file
Th = readmeshN(workdir + meshin);
Thg = Th;
buildDmesh(Th);
restu = restrict(XMh, XMhg, n2o);
XMh defu(ub), defu(um2), defu(um3);
if(fileext == "base") {
  ub[] = loadbase(fileroot, meshin);
}
else if(fileext == "fold") {
  real[string] alpha;
  real beta;
  real[int] qm, qma;
  ub[] = loadfold(fileroot, meshin, qm, qma, alpha, beta);
}
else if(fileext == "hopf") {
  real omega;
  complex[string] alpha;
  complex beta;
  complex[int] qm, qma;
  ub[] = loadhopf(fileroot, meshin, qm, qma, sym, omega, alpha, beta);
}
else if(fileext == "foho") {
  real omega;
  complex[string] alpha1;
  real[string] alpha2;
  complex beta1, gamma12, gamma13;
  real beta22, beta23, gamma22, gamma23;
  complex[int] q1m, q1ma;
  real[int] q2m, q2ma;
  ub[] = loadfoho(fileroot, meshin, q1m, q1ma, q2m, q2ma, sym, omega, alpha1, alpha2, beta1, beta22, beta23, gamma12, gamma13, gamma22, gamma23);
}
else if(fileext == "hoho") {
  real[int] sym1(sym.n), sym2(sym.n);
  real omega1, omega2;
  complex[string] alpha1, alpha2;
  complex beta1, beta2, gamma1, gamma2, gamma12, gamma13, gamma22, gamma23;
  complex[int] q1m, q1ma, q2m, q2ma;
  ub[] = loadhoho(fileroot, meshin, q1m, q1ma, q2m, q2ma, sym1, sym2, omega1, omega2, alpha1, alpha2, beta1, beta2, gamma1, gamma2, gamma12, gamma13, gamma22, gamma23);
}
else if(fileext == "tdns") {
  real time;
  ub[] = loadtdns(fileroot, meshin, time);
}
else if(fileext == "porb") {
  int Nh=1;
  real omega;
  complex[int, int] qh(ub[].n, Nh);
  ub[] = loadporb(fileroot, meshin, qh, sym, omega, Nh);
}
complex[int] val(epsnev);
XMh<complex>[int] defu(vec)(epsnev), defu(lvec)(epsnev);
XMh<complex> defu(um);

Mat<complex> J, Ja, Ma;
createMatu(Th, J, Pk);
Mat<complex> M(J);
Mat<complex> Jp(J.n, mpirank == 0 ? 1 : 0), ZZ(mpirank == 0 ? 1 : 0, mpirank == 0 ? 1 : 0); // Initialize Mat objects for bordered matrix

sym = parsesymstr(symstr);
complex[int] ik(sym.n), ik2(sym.n), ik3(sym.n);
ik.im = sym;
complex iomega = 0.0, iomega2 = 0.0, iomega3 = 0.0; // Let PETSc/SLEPc do the shift
include "eqns.idp"

complex[int,int] veca(J.n, epsnev), ;veca(J.n, epsnev);
if(mpirank==0) {
  veca.resize(J.n+1, epsnev);
  lveca.resize(J.n+1, epsnev);
}
complex shifts = string2complex(epstarget);
complex shift = shifts;
complex shiftf = string2complex(targetf);
{
  J = vJ(XMh, XMh, tgv = -2);
  J *= -1.0;
  M = vM(XMh, XMh, tgv = -20);
  complex[int] vP, vaug = vJp(0, XMh, tgv = -20);
  ChangeNumbering(J, vaug, vP); // FreeFEM to PETSc
  tempMx = [[vP]]; // dense array to sparse matrix
  ChangeOperator(Jp, tempMx); // send to Mat
  tempMx = [[0]];
  ChangeOperator(ZZ, tempMx); // send to Mat
  Mat<complex> Jatemp = [[J, Jp], [Jp', 0]]; // make dummy Jacobian
  Mat<complex> Matemp = [[M, 0], [0, ZZ]]; // make dummy Jacobian
  MatConvert(Jatemp, Ja);
  MatConvert(Matemp, Ma);
}
for (int n = 0; n < ntarget; ++n){
  if (ntarget > 1) shift = shifts + (shiftf - shifts)*real(n)/real(ntarget - 1);
  IFMACRO(Jprecon) Jprecon(-shift); ENDIFMACRO
  int k = EPSSolve(Ja, Ma, larray = lveca, array = veca, values = val, IFMACRO(Jsetargs) Jsetargs, ENDIFMACRO
                 sparams = "-st_type sinvert -options_left no -eps_monitor_conv -prefix_push st_ " + KSPparams + " -prefix_pop -eps_target " + string(shift));
  if (strictnev) {// activate to limit number of eigenpairs
    val.resize(min(k, epsnev));
    vec.resize(val.n);
    veca.resize(J.n, val.n);
    if(epstwosided) lveca.resize(J.n, val.n);
  }
  else {
    vec.resize(k);
    veca.resize(J.n, k);
    lveca.resize(J.n, k);
  }
  for (int ii = 0; ii < val.n; ++ii) {
    ChangeNumbering(J, vec[ii][], veca(:,ii), inverse = true);
    if (epstwosided) ChangeNumbering(J, lvec[ii][], lveca(:,ii), inverse = true);
  }
  savemode(fileout + ((ntarget > 1) ? ("_" + n) : ""), statout, filein, meshin, vec, val, sym, (fileout != ""));
  if(epstwosided) savemode(fileout + ((ntarget > 1) ? ("_" + n) : "") + "adj", "", filein, meshin, lvec, val, sym, (fileout != ""));
}
