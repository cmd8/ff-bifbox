//
// eqns_garnaud_2012.idp
// Chris Douglas
// christopher.douglas@duke.edu
//
// Define KSP parameters
  string KSPparams = "-ksp_type preonly -pc_type lu";
// term macros ------------------------------------------------------
  macro vdotu(v, u) ( y*(v*u + v#y*u#y) ) // velocity inner product

  macro div(ik, u) ( y*(dx(u) + dy(u#y)) + u#y ) // velocity divergence

  macro ugradu(v, U, ik, u) ( y*(v  *(U*dx(u  ) + U#y*dy(u  ) ) + v#y*(U*dx(u#y) + U#y*dy(u#y) )) ) // velocity advection term

  macro visc(ij, v, ik, u) ( y*(dx(v  )*dx(u  ) + dy(v  )*dy(u  ) + dx(v#y)*dx(u#y) + dy(v#y)*dy(u#y)) + v#y*u#y/y ) // EOM
// Boundary conditions
  macro BoundaryConditions(u, U)
    on(BCwall, u = U, u#y = U#y)
    + on(BCinflow, u = U - tanh(5.0*(1.0 - y)), u#y = U#y)
    + on(BCaxis, u#y = U#y)
  // EOM
  macro HomBoundaryConditions(u)
    on(BCinflow, BCwall, u = 0, u#y = 0)
    + on(BCaxis, u#y = 0)
  // EOM
// RESIDUAL OPERATOR
  varf vR(defu(dum), defu(v))
    = int2d(Th)(
      ugradu(v, ub, 0, ub) - div(0, v)*ubp + visc(0, v, 0, ub)*params["1/Re"]
      - vp*div(0, ub)
    )
    + BoundaryConditions(dum, ub);

// JACOBIAN OPERATOR
  varf vJ(defu(dum), defu(v))
    = int2d(Th)(
      iomega*vdotu(v, dum)
      + ugradu(v, dum, 0, ub) + ugradu(v, ub, ik, dum) - div(-ik, v)*dump + visc(-ik, v , ik, dum )*params["1/Re"]
      - vp*div(ik, dum)
    )
    + int2d(Th)(
      iomega*vdotu(v, um)
      + ugradu(v, um, 0, ub) + ugradu(v, ub, ik, um) - div(-ik, v)*ump + visc(-ik, v , ik, um )*params["1/Re"]
      - vp*div(ik, um)
    )
    + HomBoundaryConditions(dum);

// MASS OPERATOR
  varf vM(defu(dum), defu(v))
    = int2d(Th)( vdotu(v, dum) )
    + int2d(Th)( vdotu(v, um) )
    + HomBoundaryConditions(dum);

// FORCING/RESPONSE OPERATORS
  varf vMq(defu(dum), defu(v))
    = int2d(Th)( vdotu(v, dum) )
    + int2d(Th)( vdotu(v, um) )
    + HomBoundaryConditions(dum);

  varf vMf(deff(fm), deff(v))
    = int2d(Th)( vdotu(v, fm) );

  varf vP(deff(fm), defu(v))
    = int2d(Th)( vdotu(v, fm) );

// HESSIAN OPERATOR
  varf vH(defu(dum), defu(v))
    = int2d(Th)(
      ugradu(v, um, ik2, um2) + ugradu(v, um2, ik, um)
    )
    + int2d(Th)(
      ugradu(v, um, ik2, dum) + ugradu(v, dum, ik, um)
    )
    + HomBoundaryConditions(dum);

// TRESSIAN OPERATOR
  varf vT(defu(dum), defu(v))
    = HomBoundaryConditions(dum);
