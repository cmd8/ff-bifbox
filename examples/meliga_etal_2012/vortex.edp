//
// vortex.edp
// Chris Douglas
// cdoug@mit.edu
//
// This file can be used with Gmsh to create a mesh for the Grabowski-Berger
// vortex problem.
//

assert(mpisize == 1); // Must be run with 1 processor
include "settings.idp"
real n0 = 10;
real n1 = 3;
real n2 = 1;
real xmax = 120.0;
real rmax = 60.0;

string meshout = getARGV("-mo", "vortex.msh"); // mesh filename
if(meshout.rfind(".msh") < 0) meshout = meshout + ".msh"; // add extension if not provided

// Define borders
//  o-------------4-----------o
//  |                         |
//  1                         |
//  |                         3
//  |                         |
//  o----------2--------------o
border C01(t=0, 1){x=0.0; y=rmax*(1-t); label=BCinflow;}
border C02(t=0, 1){x=xmax*t; y=0; label=BCaxis;}
border C03(t=0, 1){x=xmax; y=rmax*t; label=BCopen;}
border C04(t=0, 1){x=xmax*(1-t); y=rmax; label=BCslip;}
// Assemble mesh
mesh Thg = buildmesh(C01(n0*rmax) + C02(n1*xmax) + C03(n2*rmax) + C04(n2*xmax));

int[int] meshlabels = labels(Thg);
cout << "\tMesh: " << Thg.nv << " vertices, " << Thg.nt << " elements, " << Thg.nbe << " boundary elements, " << meshlabels.n << " labeled boundaries." << endl;
cout << "  Saving mesh '" + meshout + "'." << endl;
savemesh(Thg, meshout);
