//
// eqns_douglas_etal_2023.idp
// Chris Douglas
// christopher.douglas@duke.edu
//
// Define KSP parameters
  string KSPparams = "-ksp_type preonly -pc_type lu";
// term macros ------------------------------------------------------
  macro ndotgrads(s) ( y*( N.x*dx(s) + N.y*dy(s))) // EOM

  macro gdotf(f, g) ( y*g*f )//EOM

  macro vdotu(v, u) ( y*(v*u + v#y*u#y + v#z*u#z) ) //EOM

  macro div(ik, u) ( y*(dx(u) + dy(u#y)) + u#y + (ik)*u#z ) // velocity divergence

  macro ndotvisc(v, ik, u) (  N.x*(y*(v*dx(u  ) + v#y*dy(u  )) + v#z*(ik)*u ) 
                            + N.y*(y*(v*dx(u#y) + v#y*dy(u#y)) + v#z*((ik)*u#y - u#z) )) //EOM

  macro ugradu(v, U, ik, u) ( v  *(y*(U*dx(u  ) + U#y*dy(u  )) + (ik)*U#z*u )
                            + v#y*(y*(U*dx(u#y) + U#y*dy(u#y)) + (ik)*U#z*u#y - U#z*u#z )
                            + v#z*(y*(U*dx(u#z) + U#y*dy(u#z)) + (ik)*U#z*u#z + U#z*u#y) ) // scaled convection term

  macro visc(ij, v, ik, u) ( 2.*y*dx(v  )*dx(u  )              +    y*dy(v  )*(dx(u#y) + dy(u  ))          +     (ij)*v         *( dx(u#z) + (ik)/y*u)
                              + y*dx(v#y)*(dx(u#y) + dy(u  ))  + 2.*y*dy(v#y)*dy(u#y)                      +    ((ij)*v#y - v#z)*(((ik)*u#y - u#z)/y + dy(u#z) )
                              +   dx(v#z)*((ik)*u + y*dx(u#z)) +      dy(v#z)*((ik)*u#y - u#z + y*dy(u#z)) + 2.*((ij)*v#z + v#y)*((ik)*u#z + u#y)/y ) // EOM

  macro diff(ij, g, ik, f) ( y*(dx(g)*dx(f) + dy(g)*dy(f)) + (ij)*(ik)*g*f/y ) // EOM

  macro ugradf(U, ik, f) ( y*(U*dx(f) + U#y*dy(f)) + (ik)*U#z*f ) // EOM

// Arrhenius reaction rate macro
  macro ubArr() ( y*params["Da"]*exp(params["Ze"]/params["dT"]*(1. + params["dT"])*(1. - (1. + params["dT"])/ubT)) ) // EOM
  macro dubArrdT() ( (params["Ze"]/params["dT"]*(1. + params["dT"])^2./ubT^2.)*ubArr ) // EOM
  macro d2ubArrdT2() ( (-2.*params["Ze"]/params["dT"]*(1. + params["dT"])^2./ubT^3. + (params["Ze"]/params["dT"]*(1. + params["dT"])^2./ubT^2.)^2.)*ubArr ) // EOM
  macro d3ubArrdT3() ( (6.*params["Ze"]/params["dT"]*(1. + params["dT"])^2./ubT^4. + (params["Ze"]/params["dT"]*(1. + params["dT"])^2./ubT^2.)^3. + 3.*(params["Ze"]/params["dT"]*(1. + params["dT"])^2./ubT^2.)*(-2.*params["Ze"]/params["dT"]*(1. + params["dT"])^2./ubT^3.))*ubArr ) // EOM
// power-law viscosity macro
  macro ubmu() ( ubT^(params["a"]) ) // EOM
  macro dubmudT() ( params["a"]*ubT^(params["a"] - 1.) ) // EOM
  macro d2ubmudT2() ( params["a"]*(params["a"] - 1.)*ubT^(params["a"] - 2.) ) // EOM
  macro d3ubmudT3() ( params["a"]*(params["a"] - 1.)*(params["a"] - 2.)*ubT^(params["a"] - 3.) ) // EOM

// Boundary conditions
  macro BoundaryConditions(u, U)
    on(BCinflow, u = U - (2. - 8.*y^2), u#y = U#y, u#z = U#z, u#Y = U#Y - 1., u#T = U#T - 1. )
  + on(BCwall, u = U, u#y = U#y, u#z = U#z, u#T = U#T - 1. )
  + on(BCaxis, u#y = U#y, u#z = U#z)
  // EOM
  macro HomBoundaryConditions(u)
    on(BCinflow, u = 0, u#y = 0, u#z = 0, u#Y = 0, u#T = 0 )
  + on(BCwall, u = 0, u#y = 0, u#z = 0, u#T = 0 )
  + on((abs(int(sym(0))) != 1)*BCaxis, u#y = 0, u#z = 0 )
  + on((abs(int(sym(0)))  > 0)*BCaxis, u = 0, u#Y = 0, u#T = 0 )
  // EOM
// RESIDUAL OPERATOR
varf vR(defu(um), defu(v))
      = int2d(Th)(
          vY*(ugradf(ub, 0, ubY) + ubY*ubArr)/ubT + ubmu*diff(0, vY, 0, ubY)/(params["Re"]*params["Pr"]*params["Le"])
        + vT*(ugradf(ub, 0, ubT) - params["dT"]*ubY*ubArr)/ubT + ubmu*diff(0, vT, 0, ubT)/(params["Re"]*params["Pr"])
        + ugradu(v, ub, 0, ub)/ubT - div(0, v)*ubp + ubmu*visc(0, v, 0, ub)/params["Re"]
        + vp*(div(0, ub) - params["dT"]*ubY*ubArr/ubT) + ubmu*diff(0, vp, 0, ubT)/(params["Re"]*params["Pr"])
      )
      - int1d(Th, BCopen)(
        ubmu*ndotvisc(v, 0, ub)/params["Re"]
      )
      - int1d(Th, BCaxis, BCopen, BCwall, BCinflow)(
        vp*ubmu*ndotgrads(ubT)/(params["Re"]*params["Pr"])
      )
      + BoundaryConditions(um, ub);

// JACOBIAN OPERATOR
varf vJ(defu(dum), defu(v))
      = int2d(Th)(
        iomega*(gdotf(vY, dumY) + gdotf(vT, dumT) + vdotu(v, dum))/ubT
        + vY*((ugradf(dum, 0, ubY) + ugradf(ub, ik(0), dumY) + dumY*ubArr + ubY*dubArrdT*dumT)/ubT - (ugradf(ub, 0, ubY) + ubY*ubArr)/ubT^2.*dumT) + (dubmudT*dumT*diff(-ik(0), vY, 0, ubY) + ubmu*diff(-ik(0), vY, ik(0), dumY))/(params["Re"]*params["Pr"]*params["Le"])
        + vT*((ugradf(dum, 0, ubT) + ugradf(ub, ik(0), dumT) - params["dT"]*(dumY*ubArr + ubY*dubArrdT*dumT))/ubT - (ugradf(ub, 0, ubT) - params["dT"]*ubY*ubArr)/ubT^2.*dumT) + (dubmudT*dumT*diff(-ik(0), vT, 0, ubT) + ubmu*diff(-ik(0), vT, ik(0), dumT))/(params["Re"]*params["Pr"])
        + (ugradu(v, dum, 0, ub) + ugradu(v, ub, ik(0), dum))/ubT - ugradu(v, ub, 0, ub)/ubT^2.*dumT - div(-ik(0), v)*dump + (dubmudT*dumT*visc(-ik(0), v, 0, ub) + ubmu*visc(-ik(0), v, ik(0), dum))/params["Re"]
        + vp*(div(ik(0), dum) - params["dT"]*((dumY*ubArr + ubY*dubArrdT*dumT)/ubT - ubY*ubArr/ubT^2.*dumT)) + (dubmudT*dumT*diff(-ik(0), vp, 0, ubT) + ubmu*diff(-ik(0), vp, ik(0), dumT))/(params["Re"]*params["Pr"])
      )
      - int1d(Th, BCopen)(
        (dubmudT*dumT*ndotvisc(v, 0, ub) + ubmu*ndotvisc(v, ik(0), dum))/params["Re"]
      )
      - int1d(Th, BCaxis, BCopen, BCwall, BCinflow)(
        vp*(dubmudT*dumT*ndotgrads(ubT) + ubmu*ndotgrads(dumT))/(params["Re"]*params["Pr"])
      )
      + int2d(Th)(
        iomega*(gdotf(vY, umY) + gdotf(vT, umT) + vdotu(v, um))/ubT
        + vY*((ugradf(um, 0, ubY) + ugradf(ub, ik(0), umY) + umY*ubArr + ubY*dubArrdT*umT)/ubT - (ugradf(ub, 0, ubY) + ubY*ubArr)/ubT^2.*umT) + (dubmudT*umT*diff(-ik(0), vY, 0, ubY) + ubmu*diff(-ik(0), vY, ik(0), umY))/(params["Re"]*params["Pr"]*params["Le"])
        + vT*((ugradf(um, 0, ubT) + ugradf(ub, ik(0), umT) - params["dT"]*(umY*ubArr + ubY*dubArrdT*umT))/ubT - (ugradf(ub, 0, ubT) - params["dT"]*ubY*ubArr)/ubT^2.*umT) + (dubmudT*umT*diff(-ik(0), vT, 0, ubT) + ubmu*diff(-ik(0), vT, ik(0), umT))/(params["Re"]*params["Pr"])
        + (ugradu(v, um, 0, ub) + ugradu(v, ub, ik(0), um))/ubT - ugradu(v, ub, 0, ub)/ubT^2.*umT - div(-ik(0), v)*ump + (dubmudT*umT*visc(-ik(0), v, 0, ub) + ubmu*visc(-ik(0), v, ik(0), um))/params["Re"]
        + vp*(div(ik(0), um) - params["dT"]*((umY*ubArr + ubY*dubArrdT*umT)/ubT - ubY*ubArr/ubT^2.*umT)) + (dubmudT*umT*diff(-ik(0), vp, 0, ubT) + ubmu*diff(-ik(0), vp, ik(0), umT))/(params["Re"]*params["Pr"])
      )
      - int1d(Th, BCopen)(
        (dubmudT*umT*ndotvisc(v, 0, ub) + ubmu*ndotvisc(v, ik(0), um))/params["Re"]
      )
      - int1d(Th, BCaxis, BCopen, BCwall, BCinflow)(
        vp*(dubmudT*umT*ndotgrads(ubT) + ubmu*ndotgrads(umT))/(params["Re"]*params["Pr"])
      )
      + HomBoundaryConditions(dum);

// MASS OPERATOR
varf vM(defu(dum), defu(v))
      = int2d(Th)( (gdotf(vY, dumY) + gdotf(vT, dumT) + vdotu(v, dum))/ubT )
      + int2d(Th)( (gdotf(vY, umY) + gdotf(vT, umT) + vdotu(v, um))/ubT )
      + HomBoundaryConditions(dum);

// FORCING/RESPONSE WEIGHTING MATRICES (FOR RESOLVENT ANALYSIS)
varf vMq(defu(dum), defu(v))
      = int2d(Th)( (gdotf(vY, dumY) + gdotf(vT, dumT) + vdotu(v, dum))/ubT );

varf vMf(deff(dum), deff(v))
      = int2d(Th)( vdotu(v, dum)/ubT );

varf vP(deff(fm), defu(v))
      = int2d(Th)( vdotu(v, fm) );

// HESSIAN OPERATOR
varf vH(defu(dum), defu(v))
      = int2d(Th)(
        -(iomega*(gdotf(vY, umY) + gdotf(vT, umT) + vdotu(v, um))*dumT + iomega2*(gdotf(vY, dumY) + gdotf(vT, dumT) + vdotu(v, dum))*umT)/ubT^2.
        + vY*((ugradf(um, ik2(0), dumY) + ugradf(dum, ik(0), umY) + dubArrdT*(umY*dumT + dumY*umT) + ubY*d2ubArrdT2*dumT*umT)/ubT - ((ugradf(um, 0, ubY) + ugradf(ub, ik(0), umY) + umY*ubArr + ubY*dubArrdT*umT)*dumT + (ugradf(dum, 0, ubY) + ugradf(ub, ik2(0), dumY) + dumY*ubArr + ubY*dubArrdT*dumT)*umT)/ubT^2. + 2.*(ugradf(ub, 0, ubY) + ubY*ubArr)/ubT^3.*dumT*umT) + (d2ubmudT2*dumT*umT*diff(-ik(0)-ik2(0), vY, 0, ubY) + dubmudT*(umT*diff(-ik(0)-ik2(0), vY, ik2(0), dumY) + dumT*diff(-ik(0)-ik2(0), vY, ik(0), umY)))/(params["Re"]*params["Pr"]*params["Le"])
        + vT*((ugradf(um, ik2(0), dumT) + ugradf(dum, ik(0), umT) - params["dT"]*(dubArrdT*(umY*dumT + dumY*umT) + ubY*d2ubArrdT2*dumT*umT))/ubT - ((ugradf(um, 0, ubT) + ugradf(ub, ik(0), umT) - params["dT"]*(umY*ubArr + ubY*dubArrdT*umT))*dumT + (ugradf(dum, 0, ubT) + ugradf(ub, ik2(0), dumT) - params["dT"]*(dumY*ubArr + ubY*dubArrdT*dumT))*umT)/ubT^2. + 2.*(ugradf(ub, 0, ubT) - params["dT"]*ubY*ubArr)/ubT^3.*dumT*umT) + (d2ubmudT2*dumT*umT*diff(-ik(0)-ik2(0), vT, 0, ubT) + dubmudT*(umT*diff(-ik(0)-ik2(0), vT, ik2(0), dumT) + dumT*diff(-ik(0)-ik2(0), vT, ik(0), umT)))/(params["Re"]*params["Pr"])
        + (ugradu(v, um, ik2(0), dum) + ugradu(v, dum, ik(0), um))/ubT - ((ugradu(v, um, 0, ub) + ugradu(v, ub, ik(0), um))*dumT + (ugradu(v, dum, 0, ub) + ugradu(v, ub, ik2(0), dum))*umT)/ubT^2. + 2.*ugradu(v, ub, 0, ub)/ubT^3.*dumT*umT + (d2ubmudT2*umT*dumT*visc(-ik(0)-ik2(0), v, 0, ub) + dubmudT*(umT*visc(-ik(0)-ik2(0), v, ik2(0), dum) + dumT*visc(-ik(0)-ik2(0), v, ik(0), um)))/params["Re"]
        - params["dT"]*vp*((dubArrdT*(umY*dumT + dumY*umT) + ubY*d2ubArrdT2*dumT*umT)/ubT - (ubArr*(umY*dumT + dumY*umT) + 2.*ubY*dubArrdT*umT*dumT)/ubT^2. + 2.*ubY*ubArr/ubT^3.*dumT*umT) + (d2ubmudT2*dumT*umT*diff(-ik(0)-ik2(0), vp, 0, ubT) + dubmudT*(umT*diff(-ik(0)-ik2(0), vp, ik2(0), dumT) + dumT*diff(-ik(0)-ik2(0), vp, ik(0), umT)))/(params["Re"]*params["Pr"])
      )
      - int1d(Th, BCopen)(
        (d2ubmudT2*dumT*umT*ndotvisc(v, 0, ub) + dubmudT*(umT*ndotvisc(v, ik2(0), dum) + dumT*ndotvisc(v, ik(0), um)))/params["Re"]
      )
      - int1d(Th, BCaxis, BCopen, BCwall, BCinflow)(
        vp*(d2ubmudT2*dumT*umT*ndotgrads(ubT) + dubmudT*(umT*ndotgrads(dumT) + dumT*ndotgrads(umT)))/(params["Re"]*params["Pr"])
      )
      + int2d(Th)(
        -(iomega*(gdotf(vY, umY) + gdotf(vT, umT) + vdotu(v, um))*um2T + iomega2*(gdotf(vY, um2Y) + gdotf(vT, um2T) + vdotu(v, um2))*umT)/ubT^2.
        + vY*((ugradf(um, ik2(0), um2Y) + ugradf(um2, ik(0), umY) + dubArrdT*(umY*um2T + um2Y*umT) + ubY*d2ubArrdT2*um2T*umT)/ubT - ((ugradf(um, 0, ubY) + ugradf(ub, ik(0), umY) + umY*ubArr + ubY*dubArrdT*umT)*um2T + (ugradf(um2, 0, ubY) + ugradf(ub, ik2(0), um2Y) + um2Y*ubArr + ubY*dubArrdT*um2T)*umT)/ubT^2. + 2.*(ugradf(ub, 0, ubY) + ubY*ubArr)/ubT^3.*um2T*umT) + (d2ubmudT2*um2T*umT*diff(-ik(0)-ik2(0), vY, 0, ubY) + dubmudT*(umT*diff(-ik(0)-ik2(0), vY, ik2(0), um2Y) + um2T*diff(-ik(0)-ik2(0), vY, ik(0), umY)))/(params["Re"]*params["Pr"]*params["Le"])
        + vT*((ugradf(um, ik2(0), um2T) + ugradf(um2, ik(0), umT) - params["dT"]*(dubArrdT*(umY*um2T + um2Y*umT) + ubY*d2ubArrdT2*um2T*umT))/ubT - ((ugradf(um, 0, ubT) + ugradf(ub, ik(0), umT) - params["dT"]*(umY*ubArr + ubY*dubArrdT*umT))*um2T + (ugradf(um2, 0, ubT) + ugradf(ub, ik2(0), um2T) - params["dT"]*(um2Y*ubArr + ubY*dubArrdT*um2T))*umT)/ubT^2. + 2.*(ugradf(ub, 0, ubT) - params["dT"]*ubY*ubArr)/ubT^3.*um2T*umT) + (d2ubmudT2*um2T*umT*diff(-ik(0)-ik2(0), vT, 0, ubT) + dubmudT*(umT*diff(-ik(0)-ik2(0), vT, ik2(0), um2T) + um2T*diff(-ik(0)-ik2(0), vT, ik(0), umT)))/(params["Re"]*params["Pr"])
        + (ugradu(v, um, ik2(0), um2) + ugradu(v, um2, ik(0), um))/ubT - ((ugradu(v, um, 0, ub) + ugradu(v, ub, ik(0), um))*um2T + (ugradu(v, um2, 0, ub) + ugradu(v, ub, ik2(0), um2))*umT)/ubT^2. + 2.*ugradu(v, ub, 0, ub)/ubT^3.*um2T*umT + (d2ubmudT2*umT*um2T*visc(-ik(0)-ik2(0), v, 0, ub) + dubmudT*(umT*visc(-ik(0)-ik2(0), v, ik2(0), um2) + um2T*visc(-ik(0)-ik2(0), v, ik(0), um)))/params["Re"]
        - params["dT"]*vp*((dubArrdT*(umY*um2T + um2Y*umT) + ubY*d2ubArrdT2*um2T*umT)/ubT - (ubArr*(umY*um2T + um2Y*umT) + 2.*ubY*dubArrdT*umT*um2T)/ubT^2. + 2.*ubY*ubArr/ubT^3.*um2T*umT) + (d2ubmudT2*um2T*umT*diff(-ik(0)-ik2(0), vp, 0, ubT) + dubmudT*(umT*diff(-ik(0)-ik2(0), vp, ik2(0), um2T) + um2T*diff(-ik(0)-ik2(0), vp, ik(0), umT)))/(params["Re"]*params["Pr"])
      )
      - int1d(Th, BCopen)(
        (d2ubmudT2*um2T*umT*ndotvisc(v, 0, ub) + dubmudT*(umT*ndotvisc(v, ik2(0), um2) + um2T*ndotvisc(v, ik(0), um)))/params["Re"]
      )
      - int1d(Th, BCaxis, BCopen, BCwall, BCinflow)(
        vp*(d2ubmudT2*um2T*umT*ndotgrads(ubT) + dubmudT*(umT*ndotgrads(um2T) + um2T*ndotgrads(umT)))/(params["Re"]*params["Pr"])
      )
      + HomBoundaryConditions(dum);

// TRESSIAN OPERATOR (FOR WEAKLY NONLINEAR ANALYSIS)
varf vT(defu(dum), defu(v))
    =  int2d(Th)(
        2.*(iomega*(gdotf(vY, umY) + gdotf(vT, umT) + vdotu(v, um))*um2T*um3T + iomega2*(gdotf(vY, um2Y) + gdotf(vT, um2T) + vdotu(v, um2))*umT*um3T/ubT^3. + iomega3*(gdotf(vY, um3Y) + gdotf(vT, um3T) + vdotu(v, um3))*umT*um2T)/ubT^3.
        + vY*((d2ubArrdT2*(um3T*(umY*um2T + um2Y*umT) + um3Y*um2T*umT) + ubY*d3ubArrdT3*um3T*um2T*umT)/ubT - ((ugradf(um, ik2(0), um2Y) + ugradf(um2, ik(0), umY) + dubArrdT*(umY*um2T + um2Y*umT) + ubY*d2ubArrdT2*um2T*umT)*um3T + (ugradf(um, ik3(0), um3Y) + ugradf(um3, ik(0), umY) + dubArrdT*(umY*um3T + um3Y*umT) + ubY*d2ubArrdT2*um3T*umT)*um2T + (ugradf(um2, ik3(0), um3Y) + ugradf(um3, ik2(0), um2Y) + dubArrdT*(um2Y*um3T + um3Y*um2T) + ubY*d2ubArrdT2*um3T*um2T)*umT)/ubT^2. + 2.*(((ugradf(um, 0, ubY) + ugradf(ub, ik(0), umY) + umY*ubArr + ubY*dubArrdT*umT)*um2T + (ugradf(um2, 0, ubY) + ugradf(ub, ik2(0), um2Y) + um2Y*ubArr + ubY*dubArrdT*um2T)*umT)*um3T + (ugradf(um3, 0, ubY) + ugradf(ub, ik3(0), um3Y) + um3Y*ubArr + ubY*dubArrdT*um3T)*um2T*umT)/ubT^3. - 6.*(ugradf(ub, 0, ubY) + ubY*ubArr)/ubT^4.*um3T*um2T*umT) + (d3ubmudT3*um3T*um2T*umT*diff(-ik(0)-ik2(0)-ik3(0), vY, 0, ubY) + d2ubmudT2*(um2T*umT*diff(-ik(0)-ik2(0)-ik3(0), vY, ik3(0), um3Y) + um3T*(umT*diff(-ik(0)-ik2(0)-ik3(0), vY, ik2(0), um2Y) + um2T*diff(-ik(0)-ik2(0)-ik3(0), vY, ik(0), umY))))/(params["Re"]*params["Pr"]*params["Le"])
        + vT*(( - params["dT"]*(d2ubArrdT2*(um3T*(umY*um2T + um2Y*umT) + um3Y*um2T*umT) + ubY*d3ubArrdT3*um3T*um2T*umT))/ubT - ((ugradf(um, ik2(0), um2T) + ugradf(um2, ik(0), umT) - params["dT"]*(dubArrdT*(umY*um2T + um2Y*umT) + ubY*d2ubArrdT2*um2T*umT))*um3T + (ugradf(um, ik3(0), um3T) + ugradf(um3, ik(0), umT) - params["dT"]*(dubArrdT*(umY*um3T + um3Y*umT) + ubY*d2ubArrdT2*um3T*umT))*um2T + (ugradf(um2, ik3(0), um3T) + ugradf(um3, ik2(0), um2T) - params["dT"]*(dubArrdT*(um2Y*um3T + um3Y*um2T) + ubY*d2ubArrdT2*um3T*um2T))*umT)/ubT^2. + 2.*(((ugradf(um, 0, ubT) + ugradf(ub, ik(0), umT) - params["dT"]*(umY*ubArr + ubY*dubArrdT*umT))*um2T + (ugradf(um2, 0, ubT) + ugradf(ub, ik2(0), um2T) - params["dT"]*(um2Y*ubArr + ubY*dubArrdT*um2T))*umT)*um3T + (ugradf(um3, 0, ubT) + ugradf(ub, ik3(0), um3T) - params["dT"]*(um3Y*ubArr + ubY*dubArrdT*um3T))*um2T*umT)/ubT^3. - 6.*(ugradf(ub, 0, ubT) - params["dT"]*ubY*ubArr)/ubT^4.*um3T*um2T*umT) + (d3ubmudT3*um3T*um2T*umT*diff(-ik(0)-ik2(0)-ik3(0), vT, 0, ubT) + d2ubmudT2*(um2T*umT*diff(-ik(0)-ik2(0)-ik3(0), vT, ik3(0), um3T) + um3T*(umT*diff(-ik(0)-ik2(0)-ik3(0), vT, ik2(0), um2T) + um2T*diff(-ik(0)-ik2(0)-ik3(0), vT, ik(0), umT))))/(params["Re"]*params["Pr"])
        - ((ugradu(v, um, ik2(0), um2) + ugradu(v, um2, ik(0), um))*um3T + (ugradu(v, um, ik3(0), um3) + ugradu(v, um3, ik(0), um))*um2T + (ugradu(v, um2, ik3(0), um3) + ugradu(v, um3, ik2(0), um2))*umT)/ubT^2. + 2.*(((ugradu(v, um, 0, ub) + ugradu(v, ub, ik(0), um))*um2T + (ugradu(v, um2, 0, ub) + ugradu(v, ub, ik2(0), um2))*umT)*um3T + (ugradu(v, um3, 0, ub) + ugradu(v, ub, ik3(0), um3))*um2T*umT)/ubT^3. - 6.*ugradu(v, ub, 0, ub)/ubT^4.*um3T*um2T*umT + (d3ubmudT3*umT*um2T*um3T*visc(-ik(0)-ik2(0)-ik3(0), v, 0, ub) + d2ubmudT2*(umT*um2T*visc(-ik(0)-ik2(0)-ik3(0), v, ik3(0), um3) + um3T*(umT*visc(-ik(0)-ik2(0)-ik3(0), v, ik2(0), um2) + um2T*visc(-ik(0)-ik2(0)-ik3(0), v, ik(0), um))))/params["Re"]
        - params["dT"]*vp*((d2ubArrdT2*(um3T*(umY*um2T + um2Y*umT) + um3Y*um2T*umT) + ubY*d3ubArrdT3*um3T*um2T*umT)/ubT - (2.*dubArrdT*(umY*um2T + um2Y*umT)*um3T + 2.*um3Y*dubArrdT*umT*um2T + 3.*ubY*d2ubArrdT2*um3T*umT*um2T)/ubT^2. + 2.*(ubArr*((umY*um2T + um2Y*umT)*um3T + um3Y*um2T*umT) + 3.*ubY*dubArrdT*um3T*um2T*umT)/ubT^3. - 6.*ubY*ubArr/ubT^4.*um3T*um2T*umT) + (d3ubmudT3*um3T*um2T*umT*diff(-ik(0)-ik2(0)-ik3(0), vp, 0, ubT) + d2ubmudT2*(um2T*umT*diff(-ik(0)-ik2(0)-ik3(0), vp, ik3(0), um3T) + um3T*(umT*diff(-ik(0)-ik2(0)-ik3(0), vp, ik2(0), um2T) + um2T*diff(-ik(0)-ik2(0)-ik3(0), vp, ik(0), umT))))/(params["Re"]*params["Pr"])
      )
      - int1d(Th, BCopen)(
        (d3ubmudT3*um3T*um2T*umT*ndotvisc(v, 0, ub) + d2ubmudT2*(um2T*umT*ndotvisc(v, ik3(0), um3) + um3T*(umT*ndotvisc(v, ik2(0), um2) + um2T*ndotvisc(v, ik(0), um))))/params["Re"]
      )
      - int1d(Th, BCaxis, BCopen, BCwall, BCinflow)(
        vp*(d3ubmudT3*um3T*um2T*umT*ndotgrads(ubT) + d2ubmudT2*(um2T*umT*ndotgrads(um3T) + um3T*(umT*ndotgrads(um2T) + um2T*ndotgrads(umT))))/(params["Re"]*params["Pr"])
      )
      + HomBoundaryConditions(dum);
