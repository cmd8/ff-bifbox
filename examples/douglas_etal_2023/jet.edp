//
// jet.edp
// Chris Douglas
// christopher.douglas@duke.edu
//
// This file can be used with FreeFEM to create a mesh for the laminar jet.
//

assert(mpisize == 1); // Must be run with 1 processor
include "settings.idp"
real n0 = getARGV("-n0", 32);
real n1 = getARGV("-n1", 8);
real n2 = getARGV("-n2", 2);
real xmin = getARGV("-xmin", -5.0);
real xmax = getARGV("-xmax", 50.0);
real rmax = getARGV("-rmax", 15.0);

string meshout = getARGV("-mo", "jet.msh"); // mesh filename
if(meshout.rfind(".msh") < 0) meshout = meshout + ".msh"; // add extension if not provided

// Define borders
//              o------------------4-------------------o
//              |                                      |
//              5                                      |
//              |                                      3
//  o-----6-----o                                      |
//  1                                                  |
//  o------------------------2-------------------------o
border C01(t=0, 1){x=xmin; y=0.5*(1-t); label=BCinflow;}
border C02(t=0, 1){x=xmin+(xmax-xmin)*t; y=0; label=BCaxis;}
border C03(t=0, 1){x=xmax; y=rmax*t; label=BCopen;}
border C04(t=0, 1){x=xmax*(1-t); y=rmax; label=BCopen;}
border C05(t=0, 1){x=0; y=rmax-(rmax-0.5)*t; label=BCwall;}
border C06(t=0, 1){x=xmin*t; y=0.5; label=BCwall;}
// Assemble mesh
mesh Thg = buildmesh(C01(n0*0.5) + C02(n1*(xmax-xmin)) + C03(n2*rmax) + C04(n2*xmax) + C05(n1*(rmax-0.5)) + C06(n0*abs(xmin)));

int[int] meshlabels = labels(Thg);
cout << "\tMesh: " << Thg.nv << " vertices, " << Thg.nt << " elements, " << Thg.nbe << " boundary elements, " << meshlabels.n << " labeled boundaries." << endl;
cout << "  Saving mesh '" + meshout + "'." << endl;
savemesh(Thg, meshout);
