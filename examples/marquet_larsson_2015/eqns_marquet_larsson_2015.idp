//
// eqns_marquet_larsson_2015.idp
// Chris Douglas
// christopher.douglas@duke.edu
//
// Define KSP parameters
  string KSPparams = "-ksp_type preonly -pc_type lu";
// term macros ------------------------------------------------------
  macro vdotu(v, u) ( v*u + v#y*u#y + v#z*u#z ) //EOM

  macro div(u) ( dx(u) + dy(u#y) + dZ(u#z) ) // velocity divergence

  macro ugradu(v, U, u) (  v  *(U*dx(u  ) + U#y*dy(u  ) + U#z*dZ(u  ))
                         + v#y*(U*dx(u#y) + U#y*dy(u#y) + U#z*dZ(u#y))
                         + v#z*(U*dx(u#z) + U#y*dy(u#z) + U#z*dZ(u#z)) ) // scaled convection term

  macro visc(v, u) (  dx(v  )*dx(u  ) + dy(v  )*dy(u  ) + dZ(v  )*dZ(u  )
                    + dx(v#y)*dx(u#y) + dy(v#y)*dy(u#y) + dZ(v#y)*dZ(u#y)
                    + dx(v#z)*dx(u#z) + dy(v#z)*dy(u#z) + dZ(v#z)*dZ(u#z) ) // EOM
// Boundary conditions
  macro BoundaryConditions(u, U)
    on(BCinflow, u = U - 1.0, u#y = U#y, u#z = U#z)
    + on(BCwall, u = U, u#y = U#y, u#z = U#z)
    + on(BClateral1, u#y = U#y) + on(BClateral2, u#z = U#z)
    + on(BCaxis1, u#y = U#y) + on(BCaxis2, u#z = U#z)
  // EOM
  macro HomBoundaryConditions(u)
    on(BCinflow, BCwall, u = 0, u#y = 0, u#z = 0)
    + on(BClateral1, u#y = 0) + on(BClateral2, u#z = 0)
    + on(((abs(int(sym(0))) % 2) == 0)*BCaxis1, u#y = 0)
    + on(((abs(int(sym(0))) % 2) != 0)*BCaxis1, u = 0, u#z = 0)
    + on(((abs(int(sym(1))) % 2) == 0)*BCaxis2, u#z = 0)
    + on(((abs(int(sym(1))) % 2) != 0)*BCaxis2, u = 0, u#y = 0)
  // EOM
// RESIDUAL OPERATOR
  varf vR(defu(dum), defu(v))
    = int3d(Th)(
      Jinv*(
      ugradu(v, ub, ub) - div(v)*ubp + visc(v, ub)*params["1/Re"]
      - vp*div(ub)
      )
    )
    + BoundaryConditions(dum, ub);

// JACOBIAN OPERATOR
  varf vJ(defu(dum), defu(v))
    = int3d(Th)(
      Jinv*(
      iomega*vdotu(v, dum)
      + ugradu(v, dum, ub) + ugradu(v, ub, dum) - div(v)*dump + visc(v, dum)*params["1/Re"]
      - vp*div(dum)
      )
    )
    + int3d(Th)(
      Jinv*(
      iomega*vdotu(v, um)
      + ugradu(v, um, ub) + ugradu(v, ub, um) - div(v)*ump + visc(v, um)*params["1/Re"]
      - vp*div(um)
      )
    )
    + HomBoundaryConditions(dum);

// MASS OPERATOR
  varf vM(defu(dum), defu(v))
    = int3d(Th)( Jinv*vdotu(v, dum) )
    + int3d(Th)( Jinv*vdotu(v, um) )
    + HomBoundaryConditions(dum);

// FORCING/RESPONSE WEIGHTING MATRICES (FOR RESOLVENT ANALYSIS)
  varf vMq(defu(dum), defu(v))
    = int3d(Th)( Jinv*vdotu(v, dum) );

  varf vMf(deff(fm), deff(v))
    = int3d(Th)( Jinv*vdotu(v, fm) );

  varf vP(deff(fm), defu(v))
    = int3d(Th)( Jinv*vdotu(v, fm) );

// HESSIAN OPERATOR
  varf vH(defu(dum), defu(v))
    = int3d(Th)(
      Jinv*(
      ugradu(v, um, um2) + ugradu(v, um2, um)
      )
    )
    + int3d(Th)(
      Jinv*(
      ugradu(v, um, dum) + ugradu(v, dum, um)
      )
    )
    + HomBoundaryConditions(dum);

// TRESSIAN OPERATOR
  varf vT(defu(dum), defu(v))
    = HomBoundaryConditions(dum);
