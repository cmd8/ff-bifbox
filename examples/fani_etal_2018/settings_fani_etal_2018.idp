//
// settings_poulain_etal_2023.idp
// Chris Douglas
// chris.douglas@ladhyx.polytechnique.fr
//
// Set dimension macro for 'macro_ddm.idp' (2)
  macro dimension()2//EOM NOTE: only 2 for now
// Load hpddm macros
  include "macro_ddm.idp"
  verbosity = getARGV("-v",0);
// Define parameter and monitor names
  string[int] paramnames = ["1/Re", "1/Pr", "Ma^2", "gamma"]; // set parameter names
  string[int] monitornames = [""]; // set monitor names
// Define state vector and FE space
  macro defu(u)[u, u#y, u#T, u#R]//EOM
  macro initu(i)[i, i, i, i]//EOM
  func Pk = [P2, P2, P1, P1];
// Define forcing vector and FE space (for resolvent analysis)
  macro deff(f)[f, f#y, f#T, f#R]//EOM
  macro initf(i)[i, i, i, i]//EOM
  func Pkf = [P2, P2, P1, P1];
// Define quantities for mesh adaptation and plotting in Paraview
  macro adaptu(u)[u, u#y], u#T, u#R//EOM
  macro adaptf(f)[f, f#y], f#T, f#R//EOM
// Name and order for real Paraview outputs
  string ParaviewDataName = "velocity temperature density";
  string ParaviewDataNamef = "momentum energy mass";
  int[int] ParaviewOrder = [1, 1, 1];
  int[int] ParaviewOrderf = [1, 1, 1];
// Name and order for complex Paraview outputs
  string ParaviewDataNamec = "velocity_r temperature_r density_r velocity_i temperature_i density_i";
  string ParaviewDataNamefc = "momentum_r energy_r mass_r momentum_i energy_i mass_i";
  int[int] ParaviewOrderc = [ParaviewOrder, ParaviewOrder];
  int[int] ParaviewOrderfc = [ParaviewOrderf, ParaviewOrderf];
  // Initial conditions (if no file)
  macro InitialConditions()[1, 0, 1, 1]//EOM
// Boundary labels
  int BCnull = 0;
  int BCaxis = 1;
  int BCopen = 2;
  int BCinflow = 3;
  int BCwall = 4;
  int BCslip = 5;
// Define solution monitors to extract: here x and y forces on BCwall
  macro getmonitors(u)
  // EOM
