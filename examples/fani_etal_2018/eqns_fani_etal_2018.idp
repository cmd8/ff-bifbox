//
// eqns_fani_etal_2018.idp
// Chris Douglas
// chris.douglas@ladhyx.polytechnique.fr
//
// Define KSP parameters
  string KSPparams = "";
  string EPSparams = " -eps_pos_gen_non_hermitian ";
// term macros ------------------------------------------------------
  macro beta1(x,y) ((x < -25.0)*abs(1.0 - 1.0/sqrt(params["Ma^2"]))*0.0001*(-25.0-x)
                  + (x > 80.0)*abs(1.0 + 1.0/sqrt(params["Ma^2"]))*0.0001*(x-80.0)
                  + (abs(y) > 18.0)*abs(1.0/sqrt(params["Ma^2"]))*0.0001*(abs(y)-18.0))//sponge filter

  macro gdotf(g, f) ( g*f ) // scalar inner product

  macro vdotu(v, u) ( v*u + v#y*u#y ) // velocity inner product

  macro divu(ik, u) ( dx(u) + dy(u#y) ) // velocity divergence

  macro ugradu(v, U, ik, u) (  v  *(U*dx(u  ) + U#y*dy(u  ) )
                             + v#y*(U*dx(u#y) + U#y*dy(u#y) )) // velocity advection term

  macro visc(ij, v, ik, u) (2.*dx(v  )*(dx(u  ) - 1./3.*divu(ik, u)) +    dy(v  )*(dx(u#y) + dy(u  ))
                             + dx(v#y)*(dx(u#y) + dy(u  ))           + 2.*dy(v#y)*(dy(u#y) - 1./3.*divu(ik, u)) ) // viscous term

  macro diff(ij, g, ik, f) ( dx(g)*dx(f) + dy(g)*dy(f) ) // scalar diffusion term

  macro ugradf(U, ik, f)   ( U*dx(f) + U#y*dy(f) ) // scalar advection term
// Boundary conditions
  macro BoundaryConditions(u, U)
    on(BCwall, u = U, u#y = U#y )
    + on(BCslip, u#y = U#y )
    + on(BCinflow, u = U - 1.0, u#y = U#y, u#T = U#T - 1.0)
    + on(BCaxis, u#y = U#y )
  // EOM
  macro HomBoundaryConditions(sym, u)
    on(BCwall, u = 0, u#y = 0 )
    + on(BCslip, u#y = 0 )
    + on(BCinflow, u = 0, u#y = 0, u#T = 0)
    + on((abs(int(sym)) % 2 == 0)*BCaxis, u#y = 0 )
    + on((abs(int(sym)) % 2 != 0)*BCaxis, u = 0, u#T = 0)
  // EOM
// RESIDUAL OPERATOR
  varf vR(defu(dum), defu(v))
    = int2d(Th)(
      vR*(ugradf(ub, 0, ubR) + ubR*divu(0, ub)) + beta1(x,y)*gdotf(vR, (ubR - 1.0))
      + ubR*ugradu(v, ub, 0, ub) - divu(0, v)*(ubR*ubT - 1.0)/(params["gamma"]*params["Ma^2"]) + visc(0, v, 0, ub)*params["1/Re"] + beta1(x,y)*(vdotu(v, ub) - v*1.0)
      + vT*(ubR*ugradf(ub, 0, ubT) + (params["gamma"] - 1.0)*(ubR*ubT*divu(0, ub) - params["gamma"]*params["Ma^2"]*params["1/Re"]*visc(0, ub, 0, ub))) + params["gamma"]*params["1/Pr"]*params["1/Re"]*diff(0, vT, 0, ubT) + beta1(x,y)*gdotf(vT, (ubT - 1.0))
    )
    + BoundaryConditions(dum, ub);

// JACOBIAN OPERATOR
  varf vJ(defu(dum), defu(v))
    = int2d(Th)(
      iomega*(gdotf(vR, umR) + ubR*(gdotf(vT, umT) + vdotu(v, um)))
      + vR*(ugradf(ub, ik, umR) + ugradf(um, 0, ubR) + umR*divu(0, ub) + ubR*divu(ik, um)) + beta1(x,y)*gdotf(vR, umR)
      + ubR*(ugradu(v, um, 0, ub) + ugradu(v, ub, ik, um)) + umR*ugradu(v, ub, 0, ub) - divu(-ik, v)*(umR*ubT + umT*ubR)/(params["gamma"]*params["Ma^2"]) + visc(-ik, v , ik, um )*params["1/Re"] + beta1(x,y)*vdotu(v, um)
      + vT*(ubR*(ugradf(um, 0, ubT) + ugradf(ub, ik, umT)) + umR*ugradf(ub, 0, ubT) + (params["gamma"] - 1.0)*(umR*ubT*divu(0, ub) + ubR*umT*divu(0, ub) + ubR*ubT*divu(ik, um)) - params["gamma"]*(params["gamma"] - 1.0)*params["Ma^2"]*(visc(ik, um, 0, ub) + visc(0, ub, ik, um))*params["1/Re"]) + params["gamma"]*params["1/Pr"]*params["1/Re"]*diff(-ik, vT, ik, umT) + beta1(x,y)*gdotf(vT, umT)
    )
    + int2d(Th)(
      iomega*(gdotf(vR, dumR) + ubR*(gdotf(vT, dumT) + vdotu(v, dum)))
      + vR*(ugradf(ub, ik, dumR) + ugradf(dum, 0, ubR) + dumR*divu(0, ub) + ubR*divu(ik, dum)) + beta1(x,y)*gdotf(vR, dumR)
      + ubR*(ugradu(v, dum, 0, ub) + ugradu(v, ub, ik, dum)) + dumR*ugradu(v, ub, 0, ub) - divu(-ik, v)*(dumR*ubT + dumT*ubR)/(params["gamma"]*params["Ma^2"]) + visc(-ik, v , ik, dum )*params["1/Re"] + beta1(x,y)*vdotu(v, dum)
      + vT*(ubR*(ugradf(dum, 0, ubT) + ugradf(ub, ik, dumT)) + dumR*ugradf(ub, 0, ubT) + (params["gamma"] - 1.0)*(dumR*ubT*divu(0, ub) + ubR*dumT*divu(0, ub) + ubR*ubT*divu(ik, dum)) - params["gamma"]*(params["gamma"] - 1.0)*params["Ma^2"]*(visc(ik, dum, 0, ub) + visc(0, ub, ik, dum))*params["1/Re"]) + params["gamma"]*params["1/Pr"]*params["1/Re"]*diff(-ik, vT, ik, dumT) + beta1(x,y)*gdotf(vT, dumT)
    )
    + HomBoundaryConditions(sym, dum);

// MASS OPERATOR
  varf vM(defu(dum), defu(v))
    = int2d(Th)( gdotf(vR, dumR) + ubR*(vdotu(v, dum) + gdotf(vT, dumT)) )
    + int2d(Th)( gdotf(vR, umR) + ubR*(vdotu(v, um) + gdotf(vT, umT)) )
    + HomBoundaryConditions(sym, dum);

// FORCING/RESPONSE WEIGHTING MATRICES (FOR RESOLVENT ANALYSIS)
  varf vMq(defu(dum), defu(v))
    = int2d(Th)(
      0.5*(ubT/(params["gamma"]*params["M^2"]*ubR)*gdotf(vR, dumR) + ubR*vdotu(v, dum) + ubR/(params["gamma"]*(params["gamma"] - 1.0)*params["M^2"]*ubT)*gdotf(vT, dumT))
    );

  varf vMf(deff(fm), deff(v))
    = int2d(Th)( vdotu(v, fm)/ubR );

  varf vP(deff(fm), defu(v))
    = int2d(Th)( vdotu(v, fm)/ubR );

// HESSIAN OPERATOR
  varf vH(defu(dum), defu(v))
    = int2d(Th)(
      iomega*um2R*(gdotf(vT, umT) + vdotu(v, um)) + iomega2*umR*(gdotf(vT, um2T) + vdotu(v, um2))
      + vR*(ugradf(um2, ik, umR) + ugradf(um, ik2, um2R) + umR*divu(ik2, um2) + um2R*divu(ik, um))
      + um2R*(ugradu(v, um, 0, ub) + ugradu(v, ub, ik, um)) + ubR*(ugradu(v, um, ik2, um2) + ugradu(v, um2, ik, um)) + umR*(ugradu(v, um2, 0, ub) + ugradu(v, ub, ik2, um2)) - divu(-ik, v)*(umR*um2T + umT*um2R)/(params["gamma"]*params["Ma^2"])
      + vT*(um2R*(ugradf(um, 0, ubT) + ugradf(ub, ik, umT)) + ubR*(ugradf(um, ik2, um2T) + ugradf(um2, ik, umT)) + umR*(ugradf(um2, 0, ubT) + ugradf(ub, ik2, um2T)) + (params["gamma"] - 1.0)*(umR*(um2T*divu(0, ub) + ubT*divu(ik2, um2)) + umT*(um2R*divu(0, ub) + ubR*divu(ik2, um2)) + (um2R*ubT + ubR*um2T)*divu(ik, um)) - params["gamma"]*(params["gamma"] - 1.0)*params["Ma^2"]*(visc(ik, um, ik2, um2) + visc(ik2, um2, ik, um))*params["1/Re"])
    )
    + int2d(Th)(
      iomega*dumR*(gdotf(vT, umT) + vdotu(v, um)) + iomega2*umR*(gdotf(vT, dumT) + vdotu(v, dum))
      + vR*(ugradf(dum, ik, umR) + ugradf(um, ik2, dumR) + umR*divu(ik2, dum) + dumR*divu(ik, um))
      + dumR*(ugradu(v, um, 0, ub) + ugradu(v, ub, ik, um)) + ubR*(ugradu(v, um, ik2, dum) + ugradu(v, dum, ik, um)) + umR*(ugradu(v, dum, 0, ub) + ugradu(v, ub, ik2, dum))- divu(-ik, v)*(umR*dumT + umT*dumR)/(params["gamma"]*params["Ma^2"])
      + vT*(dumR*(ugradf(um, 0, ubT) + ugradf(ub, ik, umT)) + ubR*(ugradf(um, ik2, dumT) + ugradf(dum, ik, umT)) + umR*(ugradf(dum, 0, ubT) + ugradf(ub, ik2, dumT)) + (params["gamma"] - 1.0)*(umR*(dumT*divu(0, ub) + ubT*divu(ik2, dum)) + umT*(dumR*divu(0, ub) + ubR*divu(ik2, dum)) + (dumR*ubT + ubR*dumT)*divu(ik, um)) - params["gamma"]*(params["gamma"] - 1.0)*params["Ma^2"]*(visc(ik, um, ik2, dum) + visc(ik2, dum, ik, um))*params["1/Re"])
    )
    + HomBoundaryConditions(sym, dum);

// TRESSIAN OPERATOR
  varf vT(defu(dum), defu(v))
    = int2d(Th)(
      umR*(ugradu(v, um2, ik3, um3) + ugradu(v, um3, ik2, um2)) + um2R*(ugradu(v, um, ik3, um3) + ugradu(v, um3, ik, um)) + um3R*(ugradu(v, um, ik2, um2) + ugradu(v, um2, ik, um))
      + vT*(umR*(ugradf(um2, ik3, um3T) + ugradf(um3, ik2, um2T)) + um2R*(ugradf(um, ik3, um3T) + ugradf(um3, ik, umT)) + um3R*(ugradf(um, ik2, um2T) + ugradf(um2, ik, umT)) + (params["gamma"] - 1.0)*((um2R*um3T + um3R*um2T)*divu(ik, um) + (umR*um3T + um3R*umT)*divu(ik2, um2) + (umR*um2T + um2R*umT)*divu(ik3, um3)))
    )
    + int2d(Th)(
      umR*(ugradu(v, um2, ik3, dum) + ugradu(v, dum, ik2, um2)) + um2R*(ugradu(v, um, ik3, dum) + ugradu(v, dum, ik, um)) + dumR*(ugradu(v, um, ik2, um2) + ugradu(v, um2, ik, um))
      + vT*(umR*(ugradf(um2, ik3, dumT) + ugradf(dum, ik2, um2T)) + um2R*(ugradf(um, ik3, dumT) + ugradf(dum, ik, umT)) + dumR*(ugradf(um, ik2, um2T) + ugradf(um2, ik, umT)) + (params["gamma"] - 1.0)*((um2R*dumT + dumR*um2T)*divu(ik, um) + (umR*dumT + dumR*umT)*divu(ik2, um2) + (umR*um2T + um2R*umT)*divu(ik3, dum)))
    )
    + HomBoundaryConditions(sym, dum);
