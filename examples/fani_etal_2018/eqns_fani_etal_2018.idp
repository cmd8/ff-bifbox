//
// eqns_fani_etal_2018.idp
// Chris Douglas
// cdoug@mit.edu
//
// Define KSP parameters
  string KSPparams = "-ksp_type preonly -pc_type lu";
// term macros ------------------------------------------------------
  macro beta1(x,y) ((x < -25.0)*abs(1.0 - 1.0/sqrt(params["Ma"]^2))*0.0001*(-25.0-x)
                  + (x > 80.0)*abs(1.0 + 1.0/sqrt(params["Ma"]^2))*0.0001*(x-80.0)
                  + (abs(y) > 18.0)*abs(1.0/sqrt(params["Ma"]^2))*0.0001*(abs(y)-18.0))//sponge filter

  macro vdotu(v, u) ( v*u + v#y*u#y ) // velocity inner product
  macro div(u) ( dx(u) + dy(u#y) ) // velocity divergence
  macro ugradu(v, U, u) ( v*(U*dx(u) + U#y*dy(u)) + v#y*(U*dx(u#y) + U#y*dy(u#y)) ) // velocity advection term
  macro visc(v, u) ( 2.*dx(v)*(dx(u) - 1./3.*div(u)) + dy(v)*(dx(u#y) + dy(u)) + dx(v#y)*(dx(u#y) + dy(u)) + 2.*dy(v#y)*(dy(u#y) - 1./3.*div(u)) ) // viscous term
  macro diff(g, f) ( dx(g)*dx(f) + dy(g)*dy(f) ) // scalar diffusion term
  macro ugradf(U, f)   ( U*dx(f) + U#y*dy(f) ) // scalar advection term
// Boundary conditions
  macro BoundaryConditions(u, U)
    on(BCwall, u = U, u#y = U#y )
    + on(BCslip, u#y = U#y )
    + on(BCinflow, u = U - 1.0, u#y = U#y, u#T = U#T - 1.0)
    + on(BCaxis, u#y = U#y )
  // EOM
  macro HomBoundaryConditions(sym, u)
    on(BCwall, u = 0, u#y = 0 )
    + on(BCslip, u#y = 0 )
    + on(BCinflow, u = 0, u#y = 0, u#T = 0)
    + on((abs(int(sym)) % 2 == 0)*BCaxis, u#y = 0 )
    + on((abs(int(sym)) % 2 != 0)*BCaxis, u = 0, u#T = 0)
  // EOM
// RESIDUAL OPERATOR
  varf vR(defu(dum), defu(v))
    = int2d(Th)(
      vR*(ugradf(ub, ubR) + ubR*div(ub) + beta1(x,y)*(ubR - 1.0))
      + ubR*ugradu(v, ub, ub) - div(v)*(ubR*ubT - 1.0)/(params["gamma"]*params["Ma"]^2) + beta1(x,y)*(vdotu(v, ub) - v) + visc(v, ub)*params["1/Re"]
      + vT*(ubR*ugradf(ub, ubT) + (params["gamma"] - 1.0)*(ubR*ubT*div(ub) - params["gamma"]*params["Ma"]^2*params["1/Re"]*visc(ub, ub)) + beta1(x,y)*(ubT - 1.0)) + params["gamma"]*params["1/Pr"]*params["1/Re"]*diff(vT, ubT)
    )
    + BoundaryConditions(dum, ub);

// JACOBIAN OPERATOR
  varf vJ(defu(dum), defu(v))
    = int2d(Th)(
      iomega*(vR*umR + ubR*(vT*umT + vdotu(v, um)))
      + vR*(ugradf(ub, umR) + ugradf(um, ubR) + umR*div(ub) + ubR*div(um) + beta1(x,y)*umR)
      + ubR*(ugradu(v, um, ub) + ugradu(v, ub, um)) + umR*ugradu(v, ub, ub) - div(v)*(umR*ubT + umT*ubR)/(params["gamma"]*params["Ma"]^2) + beta1(x,y)*vdotu(v, um) + visc(v , um )*params["1/Re"]
      + vT*(ubR*(ugradf(um, ubT) + ugradf(ub, umT)) + umR*ugradf(ub, ubT) + (params["gamma"] - 1.0)*(umR*ubT*div(ub) + ubR*umT*div(ub) + ubR*ubT*div(um)) - params["gamma"]*(params["gamma"] - 1.0)*params["Ma"]^2*(visc(um, ub) + visc(ub, um))*params["1/Re"] + beta1(x,y)*umT) + params["gamma"]*params["1/Pr"]*params["1/Re"]*diff(vT, umT)
    )
    + int2d(Th)(
      iomega*(vR*dumR + ubR*(vT*dumT + vdotu(v, dum)))
      + vR*(ugradf(ub, dumR) + ugradf(dum, ubR) + dumR*div(ub) + ubR*div(dum) + beta1(x,y)*dumR)
      + ubR*(ugradu(v, dum, ub) + ugradu(v, ub, dum)) + dumR*ugradu(v, ub, ub) - div(v)*(dumR*ubT + dumT*ubR)/(params["gamma"]*params["Ma"]^2) + beta1(x,y)*vdotu(v, dum) + visc(v , dum )*params["1/Re"]
      + vT*(ubR*(ugradf(dum, ubT) + ugradf(ub, dumT)) + dumR*ugradf(ub, ubT) + (params["gamma"] - 1.0)*(dumR*ubT*div(ub) + ubR*dumT*div(ub) + ubR*ubT*div(dum)) - params["gamma"]*(params["gamma"] - 1.0)*params["Ma"]^2*(visc(dum, ub) + visc(ub, dum))*params["1/Re"] + beta1(x,y)*dumT) + params["gamma"]*params["1/Pr"]*params["1/Re"]*diff(vT, dumT
    )
    + HomBoundaryConditions(sym, dum);

// MASS OPERATOR
  varf vM(defu(dum), defu(v))
    = int2d(Th)( vR*dumR + ubR*(vdotu(v, dum) + vT*dumT) )
    + int2d(Th)( vR*umR + ubR*(vdotu(v, um) + vT*umT) )
    + HomBoundaryConditions(sym, dum);

// FORCING/RESPONSE WEIGHTING MATRICES (FOR RESOLVENT ANALYSIS)
  varf vMq(defu(dum), defu(v))
    = int2d(Th)(
      0.5*(ubT/(params["gamma"]*params["Ma"]^2*ubR)*vR*dumR + ubR*vdotu(v, dum) + ubR/(params["gamma"]*(params["gamma"] - 1.0)*params["Ma"]^2*ubT)*vT*dumT)
    );

  varf vMf(deff(fm), deff(v))
    = int2d(Th)( vdotu(v, fm) );

  varf vP(deff(fm), defu(v))
    = int2d(Th)( vdotu(v, fm) );

// HESSIAN OPERATOR
  varf vH(defu(dum), defu(v))
    = int2d(Th)(
      iomega*um2R*(vT*umT + vdotu(v, um)) + iomega2*umR*(vT*um2T + vdotu(v, um2))
      + vR*(ugradf(um2, umR) + ugradf(um, um2R) + umR*div(um2) + um2R*div(um))
      + um2R*(ugradu(v, um, ub) + ugradu(v, ub, um)) + ubR*(ugradu(v, um, um2) + ugradu(v, um2, um)) + umR*(ugradu(v, um2, ub) + ugradu(v, ub, um2)) - div(v)*(umR*um2T + umT*um2R)/(params["gamma"]*params["Ma"]^2)
      + vT*(um2R*(ugradf(um, ubT) + ugradf(ub, umT)) + ubR*(ugradf(um, um2T) + ugradf(um2, umT)) + umR*(ugradf(um2, ubT) + ugradf(ub, um2T)) + (params["gamma"] - 1.0)*(umR*(um2T*div(ub) + ubT*div(um2)) + umT*(um2R*div(ub) + ubR*div(um2)) + (um2R*ubT + ubR*um2T)*div(um)) - params["gamma"]*(params["gamma"] - 1.0)*params["Ma"]^2*(visc(um, um2) + visc(um2, um))*params["1/Re"])
    )
    + int2d(Th)(
      iomega*dumR*(vT*umT + vdotu(v, um)) + iomega2*umR*(vT*dumT + vdotu(v, dum))
      + vR*(ugradf(dum, umR) + ugradf(um, dumR) + umR*div(dum) + dumR*div(um))
      + dumR*(ugradu(v, um, ub) + ugradu(v, ub, um)) + ubR*(ugradu(v, um, dum) + ugradu(v, dum, um)) + umR*(ugradu(v, dum, ub) + ugradu(v, ub, dum))- div(v)*(umR*dumT + umT*dumR)/(params["gamma"]*params["Ma"]^2)
      + vT*(dumR*(ugradf(um, ubT) + ugradf(ub, umT)) + ubR*(ugradf(um, dumT) + ugradf(dum, umT)) + umR*(ugradf(dum, ubT) + ugradf(ub, dumT)) + (params["gamma"] - 1.0)*(umR*(dumT*div(ub) + ubT*div(dum)) + umT*(dumR*div(ub) + ubR*div(dum)) + (dumR*ubT + ubR*dumT)*div(um)) - params["gamma"]*(params["gamma"] - 1.0)*params["Ma"]^2*(visc(um, dum) + visc(dum, um))*params["1/Re"])
    )
    + HomBoundaryConditions(sym, dum);

// TRESSIAN OPERATOR
  varf vT(defu(dum), defu(v))
    = int2d(Th)(
      umR*(ugradu(v, um2, um3) + ugradu(v, um3, um2)) + um2R*(ugradu(v, um, um3) + ugradu(v, um3, um)) + um3R*(ugradu(v, um, um2) + ugradu(v, um2, um))
      + vT*(umR*(ugradf(um2, um3T) + ugradf(um3, um2T)) + um2R*(ugradf(um, um3T) + ugradf(um3, umT)) + um3R*(ugradf(um, um2T) + ugradf(um2, umT)) + (params["gamma"] - 1.0)*((um2R*um3T + um3R*um2T)*div(um) + (umR*um3T + um3R*umT)*div(um2) + (umR*um2T + um2R*umT)*div(um3)))
    )
    + int2d(Th)(
      umR*(ugradu(v, um2, dum) + ugradu(v, dum, um2)) + um2R*(ugradu(v, um, dum) + ugradu(v, dum, um)) + dumR*(ugradu(v, um, um2) + ugradu(v, um2, um))
      + vT*(umR*(ugradf(um2, dumT) + ugradf(dum, um2T)) + um2R*(ugradf(um, dumT) + ugradf(dum, umT)) + dumR*(ugradf(um, um2T) + ugradf(um2, umT)) + (params["gamma"] - 1.0)*((um2R*dumT + dumR*um2T)*div(um) + (umR*dumT + dumR*umT)*div(um2) + (umR*um2T + um2R*umT)*div(dum)))
    )
    + HomBoundaryConditions(sym, dum);
