// Define KSP parameters
string KSPparams = "";
string EPSparams = "";
// RESIDUAL VECTOR
  varf vR(defu(um), defu(v))
      = int2d(Th)(
        //Define linear form to evaluate nonlinear residual operator
      )
      + BoundaryConditions(0, um, ub);

// JACOBIAN MATRIX
varf vJ(defu(dum), defu(v))
      = int2d(Th)(
        //Define linear form for jacobian operator
      )
      = int2d(Th)(
        //Define bilinear form for jacobian operator
      )
      + //Define boundary conditions
      ;

// MASS MATRIX
varf vM(defu(dum), defu(v))
      = int2d(Th)(
          //define linear form for mass operator
      )
      + int2d(Th)(
          //define bilinear form for mass operator
      )
      + //Define boundary conditions
      ;

// FORCING/RESPONSE WEIGHTING MATRICES (FOR RESOLVENT ANALYSIS)
varf vMq(defu(dum), defu(v))
      = int2d(Th)(
        //
      );

varf vMf(deff(dum), deff(v))
      = int2d(Th)(
         //
      );

varf vP(deff(fm), defu(v))
      = int2d(Th)(
          //
      );

// HESSIAN OPERATOR
varf vH(defu(dum), defu(v))
      = int2d(Th)(
          //define linear form for Hessian operator
      )
      + int2d(Th)(
          //define bilinear form for Hessian operator
      )
      + //Define boundary conditions
      ;
/*
// TRESSIAN OPERATOR
varf vT(defu(dum), defu(v))
      = int2d(Th)(
          //define linear form for Hessian operator
      )
      + int2d(Th)(
          //define bilinear form for Hessian operator
      )
      + //Define boundary conditions
      ;
*/
